{
  "version": 3,
  "sources": ["src/app/gap-chart/service/gap-chart.worker.ts"],
  "sourcesContent": ["/// <reference lib=\"webworker\" />\n\nimport { ShadowLap } from \"../../lap-simulator/model/shadow-lap\";\nimport { FutureLap } from \"../../lap-simulator/model/future-lap\";\nimport { GapChartConfig } from \"../model/gap-chart-config\";\nimport { LapSimulatorConfig } from \"../../lap-simulator/model/lap-simulator-config\";\n\naddEventListener('message', ({ data }) => {\n  const gapChartConfig = data.gapChartConfig as GapChartConfig;\n  const lapSimulatorConfig = data.lapSimulatorConfig as LapSimulatorConfig;\n\n  const normalizedCumulatedTimeLaps = data.normalizedCumulatedTimeLaps as Map<number, number[]>\n  const shadowLaps = data.shadowLaps as ShadowLap[];\n  const futureLaps = data.futureLaps as FutureLap[];\n  const futureLapsWithPitNow = data.futureLapsWithPitNow as FutureLap[];\n  const teamNamesByRaceNumber = data.teamNamesByRaceNumber as Map<number, string>\n  const colorByRaceNumber = data.colorByRaceNumber as Map<number, string>\n  const gapChartVisibleByRaceNumber = data.gapChartVisibleByRaceNumber as Map<number, boolean>;\n  const shadowChartVisibleByRaceNumber = data.shadowChartVisibleByRaceNumber as Map<number, boolean>;\n  const pitNowChartVisibleByRaceNumber = data.pitNowChartVisibleByRaceNumber as Map<number, boolean>;\n\n  const referenceRaceNumber = lapSimulatorConfig.referenceRaceNumber;\n  const lapWindow = gapChartConfig.lapWindow;\n\n  const lapWindowResult = getCumulatedTimeLapsWindow(\n      normalizedCumulatedTimeLaps,\n      shadowLaps,\n      lapWindow,\n      referenceRaceNumber);\n\n  const chartData = generateData(\n      lapWindowResult,\n      teamNamesByRaceNumber,\n      futureLaps,\n      futureLapsWithPitNow,\n      colorByRaceNumber,\n      gapChartVisibleByRaceNumber,\n      shadowChartVisibleByRaceNumber,\n      pitNowChartVisibleByRaceNumber)\n\n  postMessage({\n    chartData: chartData\n  });\n});\n\nfunction getCumulatedTimeLapsWindow(\n    normalizedCumulatedTimeLaps: Map<number, number[]>,\n    shadowLaps: ShadowLap[],\n    lapWindow: number,\n    referenceRaceNumber: number\n): LapWindowResult {\n  const cumulatedTimeLapsWindow = new Map<number, number[]>()\n  const shadowLapsWindow: ShadowLap[] = [];\n\n  let referenceCumulatedTimeLapsIndex = 0;\n\n  if (referenceRaceNumber && normalizedCumulatedTimeLaps.has(referenceRaceNumber)) {\n    const referenceCumulatedTimeLaps = normalizedCumulatedTimeLaps.get(referenceRaceNumber);\n    referenceCumulatedTimeLapsIndex = referenceCumulatedTimeLaps !== undefined ? referenceCumulatedTimeLaps.length - lapWindow: 0;\n  } else {\n    // In caso di nessun race number di riferimento, prendo race number con il minor numero di giri\n    let minLaps = Number.MAX_VALUE;\n    normalizedCumulatedTimeLaps.forEach((laps) => {\n      minLaps = Math.min(minLaps, laps.length);\n    });\n    referenceCumulatedTimeLapsIndex = minLaps - lapWindow;\n  }\n\n  if (referenceCumulatedTimeLapsIndex <= 0) {\n    return {\n      cumulatedTimeLapsWindow: normalizedCumulatedTimeLaps,\n      startLapNumber: 0,\n      shadowTimeLapsWindow: shadowLaps\n    };\n  }\n\n  normalizedCumulatedTimeLaps.forEach((laps, raceNumber) => {\n    if (laps.length > referenceCumulatedTimeLapsIndex) {\n      const windowLaps = laps.slice(referenceCumulatedTimeLapsIndex)\n      cumulatedTimeLapsWindow.set(raceNumber, windowLaps);\n    }\n  });\n\n  shadowLaps.forEach((shadowLap) => {\n    if (shadowLap.startLapNumber >= referenceCumulatedTimeLapsIndex){\n      shadowLapsWindow.push({\n        startLapNumber: shadowLap.startLapNumber,\n        cumulatedTimeLaps: cumulatedTimeLapsWindow\n      })\n    } else {\n      const newStartLapNumber = referenceCumulatedTimeLapsIndex;\n      const shadowTimeLapsWindow = new Map<number, number[]>();\n      shadowLap.cumulatedTimeLaps.forEach((laps, raceNumber) => {\n        const windowLaps = laps.slice(referenceCumulatedTimeLapsIndex - shadowLap.startLapNumber);\n        shadowTimeLapsWindow.set(raceNumber, windowLaps);\n      });\n      shadowLapsWindow.push({\n        startLapNumber: newStartLapNumber,\n        cumulatedTimeLaps: shadowTimeLapsWindow\n      })\n    }\n  });\n\n  return {\n    cumulatedTimeLapsWindow: cumulatedTimeLapsWindow,\n    startLapNumber: referenceCumulatedTimeLapsIndex,\n    shadowTimeLapsWindow: shadowLapsWindow\n  };\n}\n\nfunction generateData(\n    lapWindowResult: LapWindowResult,\n    teamNamesByRaceNumber: Map<number,string>,\n    futureLaps: FutureLap[],\n    futureLapsWithPitNow: FutureLap[],\n    colorByRaceNumber: Map<number, string>,\n    gapChartVisibleByRaceNumber: Map<number, boolean>,\n    shadowChartVisibleByRaceNumber: Map<number, boolean>,\n    pitNowChartVisibleByRaceNumber: Map<number, boolean>\n): any {\n  const datasets: any[] = [];\n\n  lapWindowResult.cumulatedTimeLapsWindow.forEach((laps, raceNumber) => {\n    if (!gapChartVisibleByRaceNumber.get(raceNumber)) {\n      return;\n    }\n    const color = colorByRaceNumber.get(raceNumber);\n\n    const nameSuffix = teamNamesByRaceNumber.has(raceNumber) ? ' - ' + teamNamesByRaceNumber.get(raceNumber) : '';\n    const name: string = raceNumber + nameSuffix;\n\n    const chartDataset = {\n      data: generateLapPoints(laps, lapWindowResult.startLapNumber),\n      label: name,\n      backgroundColor: color,\n      borderColor: color,\n      pointBackgroundColor: color,\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: color,\n      showLine: true,\n      parsing: false,\n      normalized: true,\n    };\n\n    datasets.push(chartDataset);\n  });\n\n  lapWindowResult.shadowTimeLapsWindow.forEach((shadowLap) => {\n\n    shadowLap.cumulatedTimeLaps.forEach((laps, raceNumber) => {\n      if (!shadowChartVisibleByRaceNumber.get(raceNumber)) {\n        return;\n      }\n      const color = colorByRaceNumber.get(raceNumber);\n      const nameSuffix = teamNamesByRaceNumber.has(raceNumber) ? ' - ' + teamNamesByRaceNumber.get(raceNumber) : '';\n      const name: string = 'SHADOW - ' + raceNumber + nameSuffix;\n\n      const chartDataset = {\n        data: generateLapPoints(laps, shadowLap.startLapNumber),\n        label: name,\n        backgroundColor: 'gray',\n        borderColor: 'gray',\n        pointBackgroundColor: color,\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: '#fff',\n        pointHoverBorderColor: 'gray',\n        showLine: true,\n        parsing: false,\n        normalized: true,\n      };\n      datasets.push(chartDataset);\n    });\n  });\n\n  futureLaps.forEach((futureLap) => {\n      futureLap.cumulatedTimeLaps.forEach((laps, raceNumber) => {\n        if (!gapChartVisibleByRaceNumber.get(raceNumber)) {\n          return;\n        }\n\n        const color = colorByRaceNumber.get(raceNumber);\n        const nameSuffix = teamNamesByRaceNumber.has(raceNumber) ? ' - ' + teamNamesByRaceNumber.get(raceNumber) : '';\n        const name: string = 'FUTURE - ' + raceNumber + nameSuffix;\n\n        const chartDataset = {\n          data: generateLapPoints(laps, futureLap.startLapNumber),\n          label: name,\n          backgroundColor: 'gray',\n          borderColor: color,\n          pointBackgroundColor: color,\n          pointBorderColor: '#fff',\n          pointHoverBackgroundColor: color,\n          pointHoverBorderColor: 'gray',\n          borderDash: [5, 5],\n          showLine: true,\n          parsing: false,\n          normalized: true,\n        };\n        datasets.push(chartDataset);\n      });\n  });\n\n  futureLapsWithPitNow.forEach((futureLapWithPitNow) => {\n    futureLapWithPitNow.cumulatedTimeLaps.forEach((laps, raceNumber) => {\n      if (!pitNowChartVisibleByRaceNumber.get(raceNumber)) {\n        return;\n      }\n\n      const color = colorByRaceNumber.get(raceNumber);\n      const nameSuffix = teamNamesByRaceNumber.has(raceNumber) ? ' - ' + teamNamesByRaceNumber.get(raceNumber) : '';\n      const name: string = 'PIT NOW - ' + raceNumber + nameSuffix;\n\n      const chartDataset = {\n        data: generateLapPoints(laps, futureLapWithPitNow.startLapNumber),\n        label: name,\n        backgroundColor: 'gray',\n        borderColor: color,\n        pointBackgroundColor: color,\n        pointBorderColor: '#fff',\n        pointHoverBackgroundColor: color,\n        pointHoverBorderColor: 'gray',\n        borderDash: [5, 5],\n        showLine: true,\n        parsing: false,\n        normalized: true,\n      };\n      datasets.push(chartDataset);\n    });\n  });\n\n  return {\n    datasets: datasets\n  };\n}\n\nfunction generateLapPoints(laps: number[], startLapNumber: number): any[] {\n  const result: any[] = [];\n  laps.forEach((lap, index) => {\n    result.push({\n      x: index + startLapNumber,\n      y: lap,\n    });\n  });\n  return result;\n}\n\ninterface LapWindowResult {\n  cumulatedTimeLapsWindow: Map<number, number[]>;\n  startLapNumber: number;\n  shadowTimeLapsWindow: ShadowLap[];\n}\n"],
  "mappings": "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",
  "names": []
}
