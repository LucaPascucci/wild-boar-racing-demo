{
  "version": 3,
  "sources": ["node_modules/date-fns/constants.js", "node_modules/date-fns/constructFrom.js", "node_modules/date-fns/toDate.js", "node_modules/date-fns/addMilliseconds.js", "node_modules/date-fns/addSeconds.js", "src/app/pit/service/pit.worker.ts"],
  "sourcesContent": ["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n", "import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n", "import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n", "import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMilliseconds} function options.\n */\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n * @param options - The options object\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount, options) {\n  return constructFrom(options?.in || date, +toDate(date) + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n", "import { addMilliseconds } from \"./addMilliseconds.js\";\n\n/**\n * The {@link addSeconds} function options.\n */\n\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\nexport function addSeconds(date, amount, options) {\n  return addMilliseconds(date, amount * 1000, options);\n}\n\n// Fallback for modularized imports:\nexport default addSeconds;\n", "/// <reference lib=\"webworker\" />\n\nimport { Pit } from \"../model/pit\";\nimport { addSeconds } from \"date-fns\";\nimport { PitConfig } from \"../model/pit-config\";\nimport { DriverConfig } from \"../../driver/model/driver-config\";\n\naddEventListener('message', ({ data }) => {\n  const pits = data.pits as Pit[];\n  const driverConfig = data.driverConfig as DriverConfig;\n  const pitConfig = data.pitConfig as PitConfig;\n\n  const minPitSeconds = pitConfig.minPitSeconds;\n  const minTotalPitMinute = pitConfig.minTotalPitMinute\n\n  const activePit = getActivePit(pits);\n  const activePitRemainingMilliseconds = calculateActivePitRemainingMilliseconds(pits, minPitSeconds);\n  const lastRefuelPit = getLastRefuelPit(pits);\n  const lastInterphoneChangePit = getLastInterphoneChangePit(pits);\n  const lastPit = getLastPit(pits);\n  const completedDriverChanges = calculateCompletedDriverChanges(pits);\n  const remainingDriverChanges = calculateRemainingDriverChanges(pits, driverConfig);\n  const pitAVGMilliseconds = calculatePitAVGMilliseconds(pits);\n\n  const remainingMinTotalPitMilliseconds = calculateRemainingMinTotalPitMilliseconds(pits, minTotalPitMinute);\n\n  const lastKartChangePit = getLastKartChangePit(pits);\n  const completedKartChanges = calculateCompletedKartChanges(pits);\n\n  postMessage({\n    activePit: activePit,\n    lastRefuelPit: lastRefuelPit,\n    lastInterphoneChangePit: lastInterphoneChangePit,\n    lastPit: lastPit,\n    completedDriverChanges: completedDriverChanges,\n    remainingDriverChanges: remainingDriverChanges,\n    activePitRemainingMilliseconds: activePitRemainingMilliseconds,\n    pitAVGMilliseconds: pitAVGMilliseconds,\n    remainingMinTotalPitMilliseconds: remainingMinTotalPitMilliseconds,\n    lastKartChangePit: lastKartChangePit,\n    completedKartChanges: completedKartChanges\n  });\n});\n\n\nfunction getActivePit(pits: Pit[]): Pit | undefined {\n  for (const pit of pits) {\n    if (!pit.exitAt) {\n      return pit;\n    }\n  }\n  return undefined;\n}\n\nfunction calculateActivePitRemainingMilliseconds(pits: Pit[], minPitSeconds: number): number {\n  const activePit = getActivePit(pits);\n  if (activePit) {\n    const now = new Date().getTime();\n    const endPitTime = addSeconds(activePit.entryAt, minPitSeconds).getTime()\n    return endPitTime - now;\n  }\n\n  return 0;\n}\n\nfunction getLastRefuelPit(pits: Pit[]): Pit | undefined {\n  const filteredRefuelPits = pits\n  .filter(pit => pit.refuel && pit.exitAt)\n  .sort((a, b) => b.entryAt.getTime() - a.entryAt.getTime());\n  return filteredRefuelPits.at(0);\n}\n\nfunction getLastKartChangePit(pits: Pit[]): Pit | undefined {\n  const filteredRefuelPits = pits\n  .filter(pit => pit.kartChange && pit.exitAt)\n  .sort((a, b) => b.entryAt.getTime() - a.entryAt.getTime());\n  return filteredRefuelPits.at(0);\n}\n\nfunction getLastInterphoneChangePit(pits: Pit[]): Pit | undefined {\n  const filteredRefuelPits = pits\n  .filter(pit => pit.interphoneChange && pit.exitAt)\n  .sort((a, b) => b.entryAt.getTime() - a.entryAt.getTime());\n  return filteredRefuelPits.at(0);\n}\n\nfunction getLastPit(pits: Pit[]): Pit | undefined {\n  if (pits.length === 0) {\n    return undefined;\n  }\n\n  const sortedPits = pits.sort((a, b) => b.entryAt.getTime() - a.entryAt.getTime());\n\n  return sortedPits.at(0);\n}\n\nfunction calculateCompletedDriverChanges(pits: Pit[]) {\n  return pits\n  .reduce((count, pit) => {\n    return count + (pit.entryDriverId !== pit.exitDriverId ? 1 : 0);\n  }, 0);\n}\n\nfunction calculateRemainingDriverChanges(pits: Pit[], driverConfig: DriverConfig): number {\n  return Math.max(0, driverConfig.minDriverChange - calculateCompletedDriverChanges(pits));\n}\n\nfunction calculatePitAVGMilliseconds(pits: Pit[]): number {\n    const completedPits = pits.filter(pit => pit.exitAt);\n\n    if (completedPits.length === 0) {\n      return 0;\n    }\n\n    const totalMilliseconds = completedPits.reduce((sum, pit) => {\n      return sum + (pit.exitAt!.getTime() - pit.entryAt.getTime());\n    }, 0);\n\n    return Math.round(totalMilliseconds / completedPits.length);\n}\n\nfunction calculateRemainingMinTotalPitMilliseconds(pits: Pit[], minTotalPitMinute: number): number {\n  // Convert minTotalPitMinute from minutes to milliseconds\n  const minTotalPitMilliseconds = minTotalPitMinute * 60 * 1000;\n\n  if (pits.length === 0) {\n    // If no completed pits, return the full minimum required time in milliseconds\n    return minTotalPitMilliseconds;\n  }\n\n  const totalPitMilliseconds = pits.reduce((sum, pit) => {\n    let pitMilliseconds = 0;\n    if (pit.exitAt) {\n      pitMilliseconds = (pit.exitAt!.getTime() - pit.entryAt.getTime());\n    } else {\n      pitMilliseconds = (new Date().getTime() - pit.entryAt.getTime());\n    }\n    return sum + pitMilliseconds;\n  }, 0);\n\n  // Calculate remaining time (if negative, return 0)\n  return Math.max(0, minTotalPitMilliseconds - totalPitMilliseconds);\n}\n\nfunction calculateCompletedKartChanges(pits: Pit[]) {\n  return pits.filter(pit => pit.kartChange && pit.exitAt).length;\n}\n\n"],
  "mappings": "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",
  "names": []
}
