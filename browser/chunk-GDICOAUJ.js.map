{
  "version": 3,
  "sources": ["src/app/driver/service/driver-config.service.ts", "src/app/pit/service/pit-config.service.ts"],
  "sourcesContent": ["import { Injectable, signal, WritableSignal } from '@angular/core';\nimport { FirestoreService } from \"../../shared/service/firestore.service\";\nimport { collection, collectionData } from \"@angular/fire/firestore\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { map, Observable, takeUntil } from \"rxjs\";\nimport { DocumentData } from \"@angular/fire/compat/firestore\";\nimport { DriverConfig } from \"../model/driver-config\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DriverConfigService extends FirestoreService {\n  protected collectionPath: string = '/driver-configs';\n  protected collectionRef = collection(this.firestore, this.collectionPath);\n\n  readonly driverConfig: WritableSignal<DriverConfig | undefined> = signal(undefined);\n\n  constructor() {\n    super();\n\n    this.getAll()\n    .pipe(takeUntilDestroyed())\n    .subscribe(configs => {\n      if (configs.length > 0) {\n        this.driverConfig.set(configs.at(0));\n      }\n    });\n  }\n\n  updateMinDriverChange(value: number) {\n    const config = this.driverConfig();\n    if (config) {\n      config.minDriverChange = value;\n      this.updateDataWithMessage(config.id, config, 'min driver change');\n    }\n  }\n\n  updateMinDriverOnTrackMinute(value: number){\n    const config = this.driverConfig();\n    if (config) {\n      config.minDriverOnTrackMinute = value;\n      this.updateDataWithMessage(config.id, config, 'min driver on track minute');\n    }\n  }\n\n  updateMaxDriverOnTrackMinute(value: number) {\n    const config = this.driverConfig();\n    if (config) {\n      config.maxDriverOnTrackMinute = value;\n      this.updateDataWithMessage(config.id, config, 'max driver on track minute');\n    }\n  }\n\n  updateWarningDriverOnTrackThresholdMinute(value: number) {\n    const config = this.driverConfig();\n    if (config) {\n      config.warningDriverOnTrackThresholdMinute = value;\n      this.updateDataWithMessage(config.id, config, 'warning driver on track threshold minute');\n    }\n  }\n\n  private getAll(): Observable<DriverConfig[]> {\n    return collectionData(this.collectionRef).pipe(\n        takeUntil(this.destroyed),\n        map((data: DocumentData[]) => data.map(doc => doc as DriverConfig).filter(config => !config.deleted))\n    );\n  }\n\n\n}\n", "import { Injectable, signal, WritableSignal } from '@angular/core';\nimport { FirestoreService } from \"../../shared/service/firestore.service\";\nimport { collection, collectionData } from \"@angular/fire/firestore\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { map, Observable, takeUntil } from \"rxjs\";\nimport { DocumentData } from \"@angular/fire/compat/firestore\";\nimport { PitConfig } from \"../model/pit-config\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PitConfigService extends FirestoreService {\n  protected collectionPath: string = '/pit-configs';\n  protected collectionRef = collection(this.firestore, this.collectionPath);\n\n  readonly pitConfig: WritableSignal<PitConfig | undefined> = signal(undefined);\n\n  constructor() {\n    super();\n\n    this.getAll()\n    .pipe(takeUntilDestroyed())\n    .subscribe(configs => {\n      if (configs.length > 0) {\n        this.pitConfig.set(configs.at(0));\n      }\n    });\n  }\n\n  updateMinPitSeconds(value: number) {\n    const config = this.pitConfig();\n    if (config) {\n      config.minPitSeconds = value;\n      this.updateDataWithMessage(config.id, config, 'min pit seconds');\n    }\n  }\n\n  updateMinPitWithTyreChangeSeconds(value: number) {\n    const config = this.pitConfig();\n    if (config) {\n      config.minPitWithTyreChangeSeconds = value;\n      this.updateDataWithMessage(config.id, config, 'min pit with tyre change seconds');\n    }\n  }\n\n  updateMinTotalPitMinute(value: number) {\n    const config = this.pitConfig();\n    if (config) {\n      config.minTotalPitMinute = value;\n      this.updateDataWithMessage(config.id, config, 'min total pit minute');\n    }\n  }\n\n  updateMaxPitSeconds(value: number) {\n    const config = this.pitConfig();\n    if (config) {\n      config.maxPitSeconds = value;\n      this.updateDataWithMessage(config.id, config, 'max pit seconds');\n    }\n  }\n\n  private getAll(): Observable<PitConfig[]> {\n    return collectionData(this.collectionRef).pipe(\n        takeUntil(this.destroyed),\n        map((data: DocumentData[]) => data.map(doc => doc as PitConfig).filter(config => !config.deleted))\n    );\n  }\n\n\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAWM,IAAO,sBAAP,MAAO,6BAA4B,iBAAgB;EAC7C,iBAAyB;EACzB,gBAAgB,WAAW,KAAK,WAAW,KAAK,cAAc;EAE/D,eAAyD,OAAO,MAAS;EAElF,cAAA;AACE,UAAK;AAEL,SAAK,OAAM,EACV,KAAK,mBAAkB,CAAE,EACzB,UAAU,aAAU;AACnB,UAAI,QAAQ,SAAS,GAAG;AACtB,aAAK,aAAa,IAAI,QAAQ,GAAG,CAAC,CAAC;MACrC;IACF,CAAC;EACH;EAEA,sBAAsB,OAAa;AACjC,UAAM,SAAS,KAAK,aAAY;AAChC,QAAI,QAAQ;AACV,aAAO,kBAAkB;AACzB,WAAK,sBAAsB,OAAO,IAAI,QAAQ,mBAAmB;IACnE;EACF;EAEA,6BAA6B,OAAa;AACxC,UAAM,SAAS,KAAK,aAAY;AAChC,QAAI,QAAQ;AACV,aAAO,yBAAyB;AAChC,WAAK,sBAAsB,OAAO,IAAI,QAAQ,4BAA4B;IAC5E;EACF;EAEA,6BAA6B,OAAa;AACxC,UAAM,SAAS,KAAK,aAAY;AAChC,QAAI,QAAQ;AACV,aAAO,yBAAyB;AAChC,WAAK,sBAAsB,OAAO,IAAI,QAAQ,4BAA4B;IAC5E;EACF;EAEA,0CAA0C,OAAa;AACrD,UAAM,SAAS,KAAK,aAAY;AAChC,QAAI,QAAQ;AACV,aAAO,sCAAsC;AAC7C,WAAK,sBAAsB,OAAO,IAAI,QAAQ,0CAA0C;IAC1F;EACF;EAEQ,SAAM;AACZ,WAAO,eAAe,KAAK,aAAa,EAAE,KACtC,UAAU,KAAK,SAAS,GACxB,IAAI,CAAC,SAAyB,KAAK,IAAI,SAAO,GAAmB,EAAE,OAAO,YAAU,CAAC,OAAO,OAAO,CAAC,CAAC;EAE3G;;qCAvDW,sBAAmB;EAAA;4EAAnB,sBAAmB,SAAnB,qBAAmB,WAAA,YAFlB,OAAM,CAAA;;;sEAEP,qBAAmB,CAAA;UAH/B;WAAW;MACV,YAAY;KACb;;;;;ACCK,IAAO,mBAAP,MAAO,0BAAyB,iBAAgB;EAC1C,iBAAyB;EACzB,gBAAgB,WAAW,KAAK,WAAW,KAAK,cAAc;EAE/D,YAAmD,OAAO,MAAS;EAE5E,cAAA;AACE,UAAK;AAEL,SAAK,OAAM,EACV,KAAK,mBAAkB,CAAE,EACzB,UAAU,aAAU;AACnB,UAAI,QAAQ,SAAS,GAAG;AACtB,aAAK,UAAU,IAAI,QAAQ,GAAG,CAAC,CAAC;MAClC;IACF,CAAC;EACH;EAEA,oBAAoB,OAAa;AAC/B,UAAM,SAAS,KAAK,UAAS;AAC7B,QAAI,QAAQ;AACV,aAAO,gBAAgB;AACvB,WAAK,sBAAsB,OAAO,IAAI,QAAQ,iBAAiB;IACjE;EACF;EAEA,kCAAkC,OAAa;AAC7C,UAAM,SAAS,KAAK,UAAS;AAC7B,QAAI,QAAQ;AACV,aAAO,8BAA8B;AACrC,WAAK,sBAAsB,OAAO,IAAI,QAAQ,kCAAkC;IAClF;EACF;EAEA,wBAAwB,OAAa;AACnC,UAAM,SAAS,KAAK,UAAS;AAC7B,QAAI,QAAQ;AACV,aAAO,oBAAoB;AAC3B,WAAK,sBAAsB,OAAO,IAAI,QAAQ,sBAAsB;IACtE;EACF;EAEA,oBAAoB,OAAa;AAC/B,UAAM,SAAS,KAAK,UAAS;AAC7B,QAAI,QAAQ;AACV,aAAO,gBAAgB;AACvB,WAAK,sBAAsB,OAAO,IAAI,QAAQ,iBAAiB;IACjE;EACF;EAEQ,SAAM;AACZ,WAAO,eAAe,KAAK,aAAa,EAAE,KACtC,UAAU,KAAK,SAAS,GACxB,IAAI,CAAC,SAAyB,KAAK,IAAI,SAAO,GAAgB,EAAE,OAAO,YAAU,CAAC,OAAO,OAAO,CAAC,CAAC;EAExG;;qCAvDW,mBAAgB;EAAA;4EAAhB,mBAAgB,SAAhB,kBAAgB,WAAA,YAFf,OAAM,CAAA;;;sEAEP,kBAAgB,CAAA;UAH5B;WAAW;MACV,YAAY;KACb;;;",
  "names": []
}
