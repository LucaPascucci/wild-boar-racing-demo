{"version":3,"sources":["src/app/team/model/team.ts","src/app/shared/service/firestore.service.ts","src/app/team/service/team-update.service.ts","src/app/team/service/team-data.service.ts","src/app/team/service/team.service.ts","src/app/lap/service/lap-config.service.ts","src/app/lap/model/lap.ts","src/app/race/model/race.ts","src/app/race/service/race-config.service.ts","node_modules/date-fns/constants.js","node_modules/date-fns/constructFrom.js","node_modules/date-fns/toDate.js","node_modules/date-fns/addMilliseconds.js","node_modules/date-fns/addHours.js","src/app/race/service/race-update.service.ts","src/app/race/service/race.service.ts","src/app/lap/service/lap-update.service.ts","src/app/lap/model/lap-page-result.ts","src/app/lap/service/lap-loading-config.service.ts","src/app/lap/service/lap-refresh-update.service.ts","src/app/lap/service/lap-data.service.ts","src/app/lap/service/lap.service.ts"],"sourcesContent":["export interface Team {\n  id: number;\n  name: string;\n  raceNumber: number;\n  category: string;\n  yourTeam: boolean;\n  gapChartVisible: boolean;\n  shadowChartVisible: boolean;\n  pitNowChartVisible: boolean;\n}\n\nexport function deserializeTeamDTO(data: any): Team {\n  return {\n    id: data.id,\n    name: data.name,\n    raceNumber: data.raceNumber,\n    category: data.category,\n    yourTeam: data.yourTeam,\n    gapChartVisible: data.gapChartVisible,\n    shadowChartVisible: data.shadowChartVisible,\n    pitNowChartVisible: data.pitNowChartVisible,\n  };\n}\n\nexport function deserializeTeamDTOs(data: any[]): Team[] {\n  return data.map(item => deserializeTeamDTO(item));\n}\n","import { DestroyRef, inject, Injectable } from '@angular/core';\nimport { Subject } from \"rxjs\";\nimport { doc, Firestore, setDoc } from \"@angular/fire/firestore\";\nimport { NotificationService } from './notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport abstract class FirestoreService {\n  private readonly destroyRef = inject(DestroyRef);\n\n  protected readonly firestore = inject(Firestore);\n  protected readonly destroyed = new Subject<void>();\n  protected readonly notificationService = inject(NotificationService);\n\n  protected abstract collectionPath: string;\n  protected abstract collectionRef: any;\n\n  protected constructor() {\n    this.destroyRef.onDestroy(() => {\n      this.destroyed.next();\n      this.destroyed.complete();\n    });\n  }\n\n  protected updateData(id: number, data: any): Promise<void> {\n    return setDoc(doc(this.collectionRef, id.toString()), data, { merge: false });\n  }\n\n  protected async updateDataWithMessage(id: number, data: any, message: string): Promise<void> {\n    try {\n      await setDoc(doc(this.collectionRef, id.toString()), data, { merge: false });\n      this.notificationService.success('Updated: ' + message);\n    } catch (error) {\n      this.notificationService.error('Error updating: ' + message);\n      throw error;\n    }\n  }\n}\n","import { Injectable, signal, WritableSignal } from '@angular/core';\nimport { FirestoreService } from \"../../shared/service/firestore.service\";\nimport { collection, collectionData } from \"@angular/fire/firestore\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { combineLatest, map, Observable, takeUntil } from \"rxjs\";\nimport { TeamUpdate } from \"../model/team-update\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamUpdateService extends FirestoreService {\n  protected collectionPath: string = '/team-updates';\n  protected collectionRef = collection(this.firestore, this.collectionPath);\n\n  readonly teamUpdate: WritableSignal<TeamUpdate | undefined> = signal(undefined);\n\n  constructor() {\n    super()\n    this.getTeamUpdate()\n    .pipe(takeUntilDestroyed())\n    .subscribe((teamUpdate) => {\n      if (teamUpdate) {\n        const actualTeamUpdate = this.teamUpdate();\n        if (!actualTeamUpdate || actualTeamUpdate.updatedAt < teamUpdate.updatedAt) {\n          this.teamUpdate.set(teamUpdate);\n        }\n      }\n    });\n  }\n\n  private getTeamUpdate(): Observable<TeamUpdate | undefined> {\n    return combineLatest({\n      teamUpdates: collectionData(this.collectionRef)\n    })\n    .pipe(\n        takeUntil(this.destroyed),\n        map(({teamUpdates}) => {\n          const result = teamUpdates as TeamUpdate[];\n          if (result.length > 0) {\n            return result.filter(team => !team.deleted).at(0);\n          }\n          return undefined;\n        })\n    );\n  }\n\n}\n","import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { map, Observable, switchMap } from \"rxjs\";\nimport { environment } from \"../../../environments/environment\";\nimport { deserializeTeamDTOs, Team } from \"../model/team\";\nimport { TeamUpdateService } from \"./team-update.service\";\nimport { takeUntilDestroyed, toObservable } from \"@angular/core/rxjs-interop\";\nimport { NotificationService } from '../../shared/service/notification.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamDataService {\n\n  private readonly path: string = '/team-management';\n  private readonly httpClient = inject(HttpClient);\n\n  private readonly teamUpdateService = inject(TeamUpdateService);\n  private readonly notificationService = inject(NotificationService);\n\n  readonly teams: WritableSignal<Team[]> = signal([]);\n\n  constructor() {\n\n    this.getTeams([])\n    .pipe(takeUntilDestroyed())\n    .subscribe((teams) => {\n      this.teams.set(this.merge(this.teams(), teams));\n    })\n\n    // Handle teams updates\n    toObservable(this.teamUpdateService.teamUpdate)\n    .pipe(\n        switchMap(teamUpdate => teamUpdate ? this.getTeams(teamUpdate.updatedIds) : []),\n        takeUntilDestroyed(),\n    ).subscribe(updatedTeams => {\n      this.teams.set(this.merge(this.teams(), updatedTeams));\n    });\n  }\n\n  private merge(currentTeams: Team[], newTeams: Team[]): Team[] {\n    // Crea una mappa dei team attuali per ID per accesso rapido\n    const currentTeamsMap = new Map(currentTeams.map(team => [team.id, team]));\n\n    // Aggiorna o aggiungi i nuovi team\n    newTeams.forEach(newTeam => {\n      currentTeamsMap.set(newTeam.id, newTeam);\n    });\n\n    // Converte la mappa in array e ordina per raceNumber\n    return Array.from(currentTeamsMap.values()).sort((a, b) => a.raceNumber - b.raceNumber);\n  }\n\n  public refreshTeams(): void {\n    this.getTeams([])\n    .subscribe((teams) => {\n      this.teams.set(this.teams());\n      this.notificationService.success(\"Teams refreshed\")\n    });\n  }\n\n  private getTeams(ids: number[]): Observable<Team[]> {\n    return this.httpClient\n    .post<Team[]>(\n        `${environment.baseUrl}${this.path}/teams`,\n        {\n          ids: ids\n        }\n    )\n    .pipe(map((result)=> deserializeTeamDTOs(result)));\n  }\n\n  public updateGapChartVisibility(id: number, visible: boolean) {\n    this.httpClient\n    .post<void>(\n        `${environment.baseUrl}${this.path}/teams/${id}/gap-chart-visibility`,\n        { visible: visible}\n    ).subscribe(() => this.notificationService.success(`Team ${id} - gap chart visibility updated`));\n  }\n\n  public updatePitNowChartVisibility(id: number, visible: boolean): void {\n    this.httpClient\n    .post<void>(\n        `${environment.baseUrl}${this.path}/teams/${id}/pit-now-chart-visibility`,\n        { visible: visible}\n    ).subscribe(() => this.notificationService.success(`Team ${id} - pit now chart visibility updated`));\n  }\n\n  public updateShadowChartVisibility(id: number, visible: boolean): void {\n    this.httpClient\n    .post<void>(\n        `${environment.baseUrl}${this.path}/teams/${id}/shadow-chart-visibility`,\n        { visible: visible }\n    ).subscribe(() => this.notificationService.success(`Team ${id} - shadow chart visibility updated`));\n  }\n\n  public resetChartVisibility(): void {\n    this.httpClient\n    .get<void>(\n        `${environment.baseUrl}${this.path}/teams/reset-chart-visibility`,\n    ).subscribe(() => this.notificationService.success(`Team chart visibility reset`));\n  }\n}\n","import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { Team } from \"../model/team\";\nimport { combineLatest } from \"rxjs\";\nimport { takeUntilDestroyed, toObservable } from \"@angular/core/rxjs-interop\";\nimport { TeamDataService } from \"./team-data.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TeamService {\n  private readonly teamDataService = inject(TeamDataService);\n\n  private readonly worker: Worker | undefined;\n\n  readonly activeTeam: WritableSignal<Team | undefined> = signal(undefined);\n  readonly teamNameByRaceNumber: WritableSignal<Map<number, string>> = signal(new Map<number, string>());\n  readonly gapChartVisibleByRaceNumber: WritableSignal<Map<number, boolean>> = signal(new Map<number, boolean>());\n  readonly shadowChartVisibleByRaceNumber: WritableSignal<Map<number, boolean>> = signal(new Map<number, boolean>());\n  readonly pitNowChartVisibleByRaceNumber: WritableSignal<Map<number, boolean>> = signal(new Map<number, boolean>());\n\n  constructor() {\n\n    if (typeof Worker !== 'undefined') {\n      this.worker = new Worker(new URL('./team.worker', import.meta.url));\n      this.worker.onmessage = ({data}) => {\n        this.activeTeam.set(data.activeTeam);\n        this.teamNameByRaceNumber.set(data.teamNameByRaceNumber);\n        this.gapChartVisibleByRaceNumber.set(data.gapChartVisibleByRaceNumber);\n        this.shadowChartVisibleByRaceNumber.set(data.shadowChartVisibleByRaceNumber);\n        this.pitNowChartVisibleByRaceNumber.set(data.pitNowChartVisibleByRaceNumber);\n      };\n    }\n\n    combineLatest({\n      teams: toObservable(this.teamDataService.teams)\n    }).pipe(\n        takeUntilDestroyed()\n    ).subscribe(({teams}) => {\n      if (this.worker)  {\n        this.worker.postMessage({\n          teams: teams\n        })\n      }\n    });\n  }\n}\n","import { Injectable, signal, WritableSignal } from '@angular/core';\nimport { FirestoreService } from \"../../shared/service/firestore.service\";\nimport { collection, collectionData } from \"@angular/fire/firestore\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { map, Observable, takeUntil } from \"rxjs\";\nimport { DocumentData } from \"@angular/fire/compat/firestore\";\nimport { LapConfig } from \"../model/lap-config\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LapConfigService extends FirestoreService {\n  protected collectionPath: string = '/lap-configs';\n  protected collectionRef = collection(this.firestore, this.collectionPath);\n\n  readonly lapConfig: WritableSignal<LapConfig | undefined> = signal(undefined);\n\n  constructor() {\n    super();\n\n    this.getAll()\n    .pipe(takeUntilDestroyed())\n    .subscribe(configs => {\n      if (configs.length > 0) {\n        this.lapConfig.set(configs.at(0));\n      }\n    });\n  }\n\n  updateReferenceLapTime(value: number) {\n    const config = this.lapConfig();\n    if (config) {\n      config.referenceLapTimeMillisecond = value;\n      this.updateDataWithMessage(config.id, config, 'reference lap time');\n    }\n  }\n\n  updatePaceLapThreshold(value: number){\n    const config = this.lapConfig();\n    if (config) {\n      config.paceLapThresholdMilliseconds = value;\n      this.updateDataWithMessage(config.id, config, 'pace lap threshold');\n    }\n  }\n\n  updatePaceLapNumber(value: number) {\n    const config = this.lapConfig();\n    if (config) {\n      config.paceLapNumber = value;\n      this.updateDataWithMessage(config.id, config, 'pace lap number');\n    }\n  }\n\n  private getAll(): Observable<LapConfig[]> {\n    return collectionData(this.collectionRef).pipe(\n        takeUntil(this.destroyed),\n        map((data: DocumentData[]) => data.map(doc => doc as LapConfig).filter(config => !config.deleted))\n    );\n  }\n\n\n}\n","export interface Lap {\n  id: number;\n  raceId: number;\n  driverId: number;\n  stintId: number;\n  raceNumber: number;\n  lapNumber: number;\n  pitNumber: number | undefined;\n  pitStop: boolean;\n  lapMilliseconds: number;\n  gap: string | undefined;\n  position: number | undefined;\n}\n\n// --> NOTE: Utilizzare solo da BE a FE!! <--\nexport function deserializeLapDTO(data: any): Lap {\n  return {\n    id: data.id,\n    raceId: data.raceId,\n    driverId: data.driverId,\n    stintId: data.stintId,\n    raceNumber: data.raceNumber,\n    lapNumber: data.lapNumber,\n    pitNumber: data.pitNumber,\n    pitStop: data.pitStop,\n    lapMilliseconds: data.lastLapMilliseconds, // Convert from API's lastLapMilliseconds to our lapMilliseconds\n    gap: data.gap,\n    position: data.position,\n  };\n}\n\n// --> NOTE: Utilizzare solo da BE a FE!! <--\nexport function deserializeLapsDTO(data: any[]): Lap[] {\n  return data.map(item => deserializeLapDTO(item));\n}\n","export interface Race {\n  id: number;\n  startedAt: Date;\n  endedAt: Date | undefined;\n}\n\nexport function deserializeRaceDTO(data: any): Race | undefined {\n  if (data === null || data === undefined) { return; }\n  return {\n    id: data.id,\n    startedAt: new Date(data.startedAt),\n    endedAt: data.endedAt != null ? new Date(data.endedAt) : undefined,\n  };\n}\n","import { Injectable, signal, WritableSignal } from '@angular/core';\nimport { RaceConfig } from \"../model/race-config\";\nimport { FirestoreService } from \"../../shared/service/firestore.service\";\nimport { collection, collectionData } from \"@angular/fire/firestore\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { map, Observable, takeUntil } from \"rxjs\";\nimport { DocumentData } from \"@angular/fire/compat/firestore\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RaceConfigService extends FirestoreService {\n  protected collectionPath: string = '/race-configs';\n  protected collectionRef = collection(this.firestore, this.collectionPath);\n\n  readonly raceConfig: WritableSignal<RaceConfig | undefined> = signal(undefined);\n\n  constructor() {\n    super()\n    this.getAll()\n    .pipe(takeUntilDestroyed())\n    .subscribe(raceConfigs => {\n      if (raceConfigs.length > 0) {\n        this.raceConfig.set(raceConfigs.at(0));\n      }\n    });\n  }\n\n  updateFuelDurationMinute(value: number) {\n    const raceConfig = this.raceConfig();\n    if (raceConfig) {\n      raceConfig.fuelDurationMinute = value;\n      this.updateDataWithMessage(raceConfig.id, raceConfig, 'fuel duration minute');\n    }\n  }\n\n  updateInterphoneBatteryDurationMinute(value: number) {\n    const raceConfig = this.raceConfig();\n    if (raceConfig) {\n      raceConfig.interphoneBatteryDurationMinute = value;\n      this.updateDataWithMessage(raceConfig.id, raceConfig, 'interphone battery duration minute');\n    }\n  }\n\n  updateStartRaceDriverId(driverId: number) {\n    const raceConfig = this.raceConfig();\n    if (raceConfig) {\n      raceConfig.startRaceDriverId = driverId;\n      this.updateDataWithMessage(raceConfig.id, raceConfig, 'start race driver id');\n    }\n  }\n\n  updateMinStintMinute(value: number) {\n    const raceConfig = this.raceConfig();\n    if (raceConfig) {\n      raceConfig.minStintMinute = value;\n      this.updateDataWithMessage(raceConfig.id, raceConfig, 'min stint minute');\n    }\n  }\n\n  updateEndRaceButtonThresholdSeconds(value: number) {\n    const raceConfig = this.raceConfig();\n    if (raceConfig) {\n      raceConfig.endRaceButtonThresholdSeconds = value;\n      this.updateDataWithMessage(raceConfig.id, raceConfig, 'end race button threshold seconds');\n    }\n  }\n\n  updateDurationHour(value: number) {\n    const raceConfig = this.raceConfig();\n    if (raceConfig) {\n      raceConfig.durationHour = value;\n      this.updateDataWithMessage(raceConfig.id, raceConfig, 'duration hour');\n    }\n  }\n\n  private getAll(): Observable<RaceConfig[]> {\n    return collectionData(this.collectionRef).pipe(\n        takeUntil(this.destroyed),\n        map((data: DocumentData[]) => data.map(doc => doc as RaceConfig).filter(raceConfig => !raceConfig.deleted))\n    );\n  }\n\n}\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");","import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n  if (date && typeof date === \"object\" && constructFromSymbol in date) return date[constructFromSymbol](value);\n  if (date instanceof Date) return new date.constructor(value);\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;","import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMilliseconds} function options.\n */\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n * @param options - The options object\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount, options) {\n  return constructFrom(options?.in || date, +toDate(date) + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;","import { addMilliseconds } from \"./addMilliseconds.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link addHours} function options.\n */\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added\n * @param options - An object with options\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount, options) {\n  return addMilliseconds(date, amount * millisecondsInHour, options);\n}\n\n// Fallback for modularized imports:\nexport default addHours;","import { Injectable, signal, WritableSignal } from '@angular/core';\nimport { FirestoreService } from \"../../shared/service/firestore.service\";\nimport { collection, collectionData } from \"@angular/fire/firestore\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { map, Observable, takeUntil } from \"rxjs\";\nimport { DocumentData } from \"@angular/fire/compat/firestore\";\nimport { RaceUpdate } from \"../model/race-update\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RaceUpdateService extends FirestoreService {\n  protected collectionPath: string = '/race-updates';\n  protected collectionRef = collection(this.firestore, this.collectionPath);\n\n  readonly raceUpdate: WritableSignal<RaceUpdate | undefined> = signal(undefined);\n\n  constructor() {\n    super()\n    this.getAll()\n    .pipe(takeUntilDestroyed())\n    .subscribe(raceUpdates => {\n      if (raceUpdates.length > 0) {\n        const raceUpdate = raceUpdates.at(0);\n        if (raceUpdate) {\n          const actualRaceUpdate = this.raceUpdate();\n          if (!actualRaceUpdate || actualRaceUpdate.updatedAt < raceUpdate.updatedAt) {\n            this.raceUpdate.set(raceUpdate);\n          }\n        }\n      }\n    });\n  }\n\n  private getAll(): Observable<RaceUpdate[]> {\n    return collectionData(this.collectionRef).pipe(\n        takeUntil(this.destroyed),\n        map((data: DocumentData[]) => data.map(doc => doc as RaceUpdate).filter(data => !data.deleted))\n    );\n  }\n\n}\n","import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { deserializeRaceDTO, Race } from \"../model/race\";\nimport { RaceConfigService } from \"./race-config.service\";\nimport { combineLatest, map, Observable, of, switchMap } from \"rxjs\";\nimport { addHours } from 'date-fns';\nimport { takeUntilDestroyed, toObservable } from \"@angular/core/rxjs-interop\";\nimport { RaceConfig } from \"../model/race-config\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { environment } from \"../../../environments/environment\";\nimport { RaceUpdateService } from \"./race-update.service\";\nimport { take } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RaceService {\n  private readonly path: string = '/race-management';\n  private readonly httpClient = inject(HttpClient);\n  private readonly raceConfigService = inject(RaceConfigService);\n  private readonly raceUpdateService = inject(RaceUpdateService);\n\n  readonly activeRace: WritableSignal<Race | undefined> = signal(undefined);\n  readonly willEndRaceDate: WritableSignal<Date | undefined> = signal(undefined);\n\n  constructor() {\n\n    this.getActiveRace().pipe(\n      takeUntilDestroyed(),\n      take(1)\n    ).subscribe(activeRace => {\n      if (activeRace) {\n        this.activeRace.set(activeRace);\n      }\n    })\n\n    // Gestione dati ingresso (BE + Aggiornamenti Firestore)\n    combineLatest({\n      race: this.getActiveRace(),\n      raceFromUpdate: toObservable(this.raceUpdateService.raceUpdate).pipe(\n        switchMap(raceUpdate => raceUpdate ? this.getRace(raceUpdate.raceId): of(undefined))\n      ),\n    }).pipe(\n      takeUntilDestroyed(),\n    ).subscribe(({ race, raceFromUpdate }) => {\n      this.activeRace.set(raceFromUpdate ? raceFromUpdate : race ? race: undefined);\n    });\n\n    // Gestione dati ingresso (BE + Aggiornamenti Firestore)\n    combineLatest({\n      race: this.getActiveRace(),\n      raceFromUpdate: toObservable(this.raceUpdateService.raceUpdate).pipe(\n          switchMap(raceUpdate => raceUpdate ? this.getRace(raceUpdate.raceId): of(undefined))\n      ),\n    }).pipe(\n        takeUntilDestroyed(),\n    ).subscribe(({ race, raceFromUpdate }) => {\n      this.activeRace.set(raceFromUpdate ? raceFromUpdate : race ? race: undefined);\n    });\n\n    // Creazione dati applicativi\n    combineLatest({\n      activeRace: toObservable(this.activeRace),\n      raceConfig: toObservable(this.raceConfigService.raceConfig)\n    })\n    .pipe(\n        takeUntilDestroyed(),\n        map(({activeRace, raceConfig}) => {\n          return this.getWillEndRaceDate(activeRace, raceConfig);\n        }))\n    .subscribe((willEndRaceDate) => {\n      this.willEndRaceDate.set(willEndRaceDate);\n    });\n  }\n\n  private getWillEndRaceDate(activeRace: Race | undefined, raceConfig: RaceConfig | undefined): Date | undefined {\n    if (activeRace === undefined || raceConfig === undefined) {\n      return undefined;\n    }\n    if (activeRace.endedAt) {\n      return activeRace.endedAt;\n    }\n\n    return addHours(activeRace.startedAt, raceConfig.durationHour)\n  }\n\n  private getActiveRace(): Observable<Race | undefined> {\n    return this.httpClient\n    .get<Race>(\n        `${environment.baseUrl}${this.path}/active-race`,\n    )\n    .pipe(map((result) => deserializeRaceDTO(result)));\n  }\n\n  private getRace(id: number): Observable<Race | undefined> {\n    return this.httpClient\n    .get<Race>(\n        `${environment.baseUrl}${this.path}/races/${id}`,\n    )\n    .pipe(map((result: Race) => deserializeRaceDTO(result)));\n  }\n}\n","import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { combineLatest, map, Observable, takeUntil } from \"rxjs\";\nimport { RaceService } from \"../../race/service/race.service\";\nimport { FirestoreService } from \"../../shared/service/firestore.service\";\nimport { collection, collectionData } from \"@angular/fire/firestore\";\nimport { LapUpdate } from \"../model/lap-update\";\nimport { takeUntilDestroyed, toObservable } from \"@angular/core/rxjs-interop\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LapUpdateService extends FirestoreService {\n  protected override collectionPath: string = '/lap-updates';\n  protected override collectionRef = collection(this.firestore, this.collectionPath);\n\n  private readonly raceService = inject(RaceService);\n\n  readonly lapUpdate: WritableSignal<LapUpdate | undefined> = signal(undefined)\n\n  constructor() {\n    super();\n    combineLatest({\n      lapUpdate: this.getLapUpdate()\n    }).pipe(takeUntilDestroyed())\n    .subscribe(({lapUpdate}) => {\n      if (lapUpdate) {\n        const actualLapUpdate = this.lapUpdate();\n        if (!actualLapUpdate || actualLapUpdate.updatedAt < lapUpdate.updatedAt) {\n          this.lapUpdate.set(lapUpdate);\n        }\n      }\n    });\n  }\n\n  private getLapUpdate(): Observable<LapUpdate | undefined> {\n    return combineLatest({\n      lapUpdates: collectionData(this.collectionRef),\n      activeRace: toObservable(this.raceService.activeRace)\n    })\n    .pipe(\n        takeUntil(this.destroyed),\n        map(({lapUpdates, activeRace}) => {\n          const result = lapUpdates as LapUpdate[];\n          if (activeRace && result.length > 0) {\n            return result\n            .filter(lapUpdate => !lapUpdate.deleted && lapUpdate.raceId === activeRace.id)\n            .at(0);\n          }\n          return undefined;\n        })\n    );\n  }\n}\n","import { deserializeLapsDTO, Lap } from \"./lap\";\n\nexport interface LapPageResult {\n  laps: Lap[];\n  totalPages: number;\n  totalElements: number;\n}\n\nexport function deserializeLapPageResult(data: any): LapPageResult {\n  return {\n    laps: deserializeLapsDTO(data.laps),\n    totalPages: data.totalPages,\n    totalElements: data.totalElements\n  };\n}\n","import { Injectable, signal, WritableSignal } from '@angular/core';\nimport { FirestoreService } from \"../../shared/service/firestore.service\";\nimport { collection, collectionData } from \"@angular/fire/firestore\";\nimport { takeUntilDestroyed } from \"@angular/core/rxjs-interop\";\nimport { map, Observable, takeUntil } from \"rxjs\";\nimport { DocumentData } from \"@angular/fire/compat/firestore\";\nimport { LapLoadingConfig } from \"../model/lap-loading-config\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LapLoadingConfigService extends FirestoreService {\n  protected collectionPath: string = '/lap-loading-configs';\n  protected collectionRef = collection(this.firestore, this.collectionPath);\n\n  readonly lapLoadingConfig: WritableSignal<LapLoadingConfig | undefined> = signal(undefined);\n\n  constructor() {\n    super();\n\n    this.getAll()\n    .pipe(takeUntilDestroyed())\n    .subscribe(configs => {\n      if (configs.length > 0) {\n        this.lapLoadingConfig.set(configs.at(0));\n      }\n    });\n  }\n\n  updatePageSize(value: number) {\n    const config = this.lapLoadingConfig();\n    if (config) {\n      config.pageSize = value;\n      this.updateDataWithMessage(config.id, config, 'page size');\n    }\n  }\n\n  private getAll(): Observable<LapLoadingConfig[]> {\n    return collectionData(this.collectionRef).pipe(\n        takeUntil(this.destroyed),\n        map((data: DocumentData[]) => data.map(doc => doc as LapLoadingConfig).filter(config => !config.deleted))\n    );\n  }\n\n\n}\n","import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { combineLatest, map, Observable, takeUntil } from \"rxjs\";\nimport { RaceService } from \"../../race/service/race.service\";\nimport { FirestoreService } from \"../../shared/service/firestore.service\";\nimport { collection, collectionData } from \"@angular/fire/firestore\";\nimport { takeUntilDestroyed, toObservable } from \"@angular/core/rxjs-interop\";\nimport { LapRefreshUpdate } from '../model/lap-refresh.update';\nimport { Timestamp } from '@firebase/firestore';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LapRefreshUpdateService extends FirestoreService {\n  protected override collectionPath: string = '/lap-refresh-updates';\n  protected override collectionRef = collection(this.firestore, this.collectionPath);\n\n  private readonly raceService = inject(RaceService);\n\n  readonly lapRefreshUpdate: WritableSignal<LapRefreshUpdate | undefined> = signal(undefined)\n\n  constructor() {\n    super();\n    combineLatest({\n      lapRefreshUpdate: this.getLapRefreshUpdate()\n    }).pipe(takeUntilDestroyed())\n    .subscribe(({lapRefreshUpdate}) => {\n      if (lapRefreshUpdate) {\n        const actual = this.lapRefreshUpdate();\n        if (!actual || actual.updatedAt < lapRefreshUpdate.updatedAt) {\n          this.lapRefreshUpdate.set(lapRefreshUpdate);\n        }\n      }\n    });\n  }\n\n  updateRefresh() {\n    let value = this.lapRefreshUpdate();\n    const activeRace = this.raceService.activeRace();\n\n    if (!value && activeRace) {\n      value = {\n        deleted: false,\n        id: activeRace.id,\n        raceId: activeRace.id,\n        updatedAt: Timestamp.now()\n      }\n    }\n\n    if (value) {\n      value.updatedAt = Timestamp.now();\n      value.deleted = false;\n      this.updateDataWithMessage(value.id, value, 'lap refresh');\n    }\n  }\n\n  private getLapRefreshUpdate(): Observable<LapRefreshUpdate | undefined> {\n    return combineLatest({\n      lapRefreshUpdates: collectionData(this.collectionRef),\n      activeRace: toObservable(this.raceService.activeRace)\n    })\n    .pipe(\n        takeUntil(this.destroyed),\n        map(({lapRefreshUpdates, activeRace}) => {\n          const result = lapRefreshUpdates as LapRefreshUpdate[];\n          if (activeRace && result.length > 0) {\n            return result\n            .filter(lapRefreshUpdate => !lapRefreshUpdate.deleted && lapRefreshUpdate.raceId === activeRace.id)\n            .at(0);\n          }\n          return undefined;\n        })\n    );\n  }\n}\n","import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\nimport { combineLatest, map, Observable, switchMap } from \"rxjs\";\nimport { environment } from \"../../../environments/environment\";\nimport { deserializeLapsDTO, Lap } from \"../model/lap\";\nimport { LapUpdateService } from \"./lap-update.service\";\nimport { RaceService } from \"../../race/service/race.service\";\nimport { takeUntilDestroyed, toObservable } from \"@angular/core/rxjs-interop\";\nimport { deserializeLapPageResult, LapPageResult } from \"../model/lap-page-result\";\nimport { LapLoadingConfigService } from \"./lap-loading-config.service\";\nimport { NotificationService } from '../../shared/service/notification.service';\nimport { LapRefreshUpdateService } from './lap-refresh-update.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LapDataService {\n\n  private readonly path: string = '/lap-management';\n  private readonly httpClient = inject(HttpClient);\n\n  private readonly lapUpdateService = inject(LapUpdateService);\n  private readonly lapLoadingConfigService = inject(LapLoadingConfigService);\n  private readonly lapRefreshUpdateService = inject(LapRefreshUpdateService);\n  private readonly raceService = inject(RaceService);\n  private readonly notificationService = inject(NotificationService);\n\n  readonly laps: WritableSignal<Lap[]> = signal([]);\n  readonly lapsMapById: WritableSignal<Map<number,Lap>> = signal(new Map<number, Lap>());\n\n  constructor() {\n\n    // Handle race changes\n    combineLatest({\n      activeRace: toObservable(this.raceService.activeRace),\n      lapLoadingConfig: toObservable(this.lapLoadingConfigService.lapLoadingConfig),\n    })\n      .pipe(\n        takeUntilDestroyed(),\n        switchMap(({activeRace, lapLoadingConfig}) => {\n          if (activeRace && lapLoadingConfig) {\n            return this.loadAllLapsPaged(activeRace.id, [ ...this.laps().keys()], lapLoadingConfig.pageSize);\n          }\n          return [];\n        })\n      )\n      .subscribe(fetchedLaps => {\n        this.laps.set(this.merge(this.laps(), fetchedLaps));\n        this.lapsMapById.set(new Map(this.laps().map(lap => [lap.id, lap])))\n      });\n\n    // Handle laps updates\n    toObservable(this.lapUpdateService.lapUpdate).pipe(\n        switchMap(lapUpdate => lapUpdate ? this.getLaps(lapUpdate.raceId, lapUpdate.updatedIds) : []),\n        takeUntilDestroyed(),\n    ).subscribe(updatedLaps => {\n      this.laps.set(this.merge(this.laps(), updatedLaps));\n      this.lapsMapById.set(new Map(this.laps().map(lap => [lap.id, lap])))\n    });\n\n    // Handle laps refresh updates\n    combineLatest({\n      lapRefreshUpdate: toObservable(this.lapRefreshUpdateService.lapRefreshUpdate)\n    }).pipe(\n      takeUntilDestroyed(),\n    ).subscribe(lapRefreshUpdate => {\n      if (lapRefreshUpdate) {\n        this.refreshLaps();\n      }\n    });\n  }\n\n  public refreshLaps(): void {\n    const activeRace = this.raceService.activeRace();\n    const lapLoadingConfig = this.lapLoadingConfigService.lapLoadingConfig();\n\n    if (activeRace === undefined) {\n      this.notificationService.info('No active race');\n      return;\n    }\n\n    if (lapLoadingConfig) {\n      let currentLapIds = [ ...this.lapsMapById().keys() ];\n      this.loadAllLapsPaged(activeRace.id, currentLapIds, lapLoadingConfig.pageSize)\n      .subscribe(fetchedLaps => {\n        this.laps.set(this.merge(this.laps(), fetchedLaps));\n        this.lapsMapById.set(new Map(this.laps().map(lap => [lap.id, lap])));\n        this.notificationService.success('Laps refreshed')\n      });\n    }\n  }\n\n  public reloadAllLaps(): void {\n    const activeRace = this.raceService.activeRace();\n    const lapLoadingConfig = this.lapLoadingConfigService.lapLoadingConfig();\n\n    if (activeRace === undefined) {\n      this.notificationService.info('No active race');\n      return;\n    }\n\n    if (lapLoadingConfig) {\n      this.loadAllLapsPaged(activeRace.id, [], lapLoadingConfig.pageSize)\n      .subscribe(fetchedLaps => {\n        this.laps.set(this.merge(this.laps(), fetchedLaps));\n        this.lapsMapById.set(new Map(this.laps().map(lap => [lap.id, lap])));\n        this.notificationService.success('Laps refreshed')\n      });\n    }\n  }\n\n  private merge(currentLaps: Lap[], newLaps: Lap[]): Lap[] {\n    // Crea una mappa dei lap attuali per ID per accesso rapido\n    const currentLapsMap = new Map(currentLaps.map(lap => [lap.id, lap]));\n\n    // Aggiorna o aggiungi i nuovi lap\n    newLaps.forEach(newLap => {\n      currentLapsMap.set(newLap.id, newLap);\n    });\n\n    // Converte la mappa in array e ordina per ID\n    return Array.from(currentLapsMap.values()).sort((a, b) => a.id - b.id);\n  }\n\n  private loadAllLapsPaged(raceId: number, currentLapIds: number[], pageSize: number): Observable<Lap[]> {\n    return new Observable<Lap[]>(observer => {\n      const allLaps: Lap[] = [];\n\n      // Funzione ricorsiva per caricare tutte le pagine\n      const loadPage = (pageNumber: number) => {\n        this.getLapsPaged(raceId, currentLapIds, pageNumber, pageSize)\n        .subscribe({\n          next: (result: LapPageResult) => {\n            allLaps.push(...result.laps);\n\n            if (pageNumber < result.totalPages - 1) {\n              loadPage(pageNumber + 1);\n            } else {\n              observer.next(allLaps);\n              observer.complete();\n            }\n          },\n          error: (err) => {\n            observer.error(err);\n          }\n        });\n      };\n\n      // Inizia dalla prima pagina (indice 0)\n      loadPage(0);\n    });\n  }\n\n  private getLaps(raceId: number, ids: number[]): Observable<Lap[]> {\n    return this.httpClient\n    .post<Lap[]>(\n        `${environment.baseUrl}${this.path}/laps`,\n        {\n          raceId: raceId,\n          ids: ids\n        }\n    )\n    .pipe(map((result)=> deserializeLapsDTO(result)));\n  }\n\n  private getLapsPaged(raceId: number, currentLapIds: number[], pageNumber: number, pageSize: number): Observable<LapPageResult> {\n    return this.httpClient\n    .post<LapPageResult>(\n        `${environment.baseUrl}${this.path}/laps-page`,\n        {\n          raceId: raceId,\n          currentLapIds: currentLapIds,\n          pageNumber: pageNumber,\n          pageSize: pageSize,\n        }\n    )\n    .pipe(map((result) => deserializeLapPageResult(result)));\n  }\n}\n","import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { combineLatest } from \"rxjs\";\nimport { takeUntilDestroyed, toObservable } from \"@angular/core/rxjs-interop\";\nimport { LapConfigService } from \"./lap-config.service\";\nimport { LapDataService } from \"./lap-data.service\";\nimport { Lap } from '../model/lap';\nimport { TeamService } from '../../team/service/team.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LapService {\n  private readonly lapDataService = inject(LapDataService);\n  private readonly lapConfigService = inject(LapConfigService);\n  private readonly teamService = inject(TeamService);\n\n  private readonly worker: Worker | undefined;\n\n  readonly cumulatedTimeByRaceNumber: WritableSignal<Map<number, number[]>> = signal(new Map<number, number[]>());\n  readonly pacesByRaceNumber: WritableSignal<Map<number, number>> = signal(new Map<number, number>());\n  readonly lastLapNumberByRaceNumber: WritableSignal<Map<number, number>> = signal(new Map<number, number>());\n  readonly validTeamPaceLaps: WritableSignal<Lap[]> = signal([]);\n  readonly teamBestLap: WritableSignal<Lap | undefined> = signal(undefined);\n  readonly lastTeamLap: WritableSignal<Lap | undefined> = signal(undefined);\n  readonly lastTeamLapDeltaMilliseconds: WritableSignal<number | undefined> = signal(undefined);\n  readonly pitLaps: WritableSignal<Lap[]> = signal([]);\n\n  constructor() {\n\n    if (typeof Worker !== 'undefined') {\n      this.worker = new Worker(new URL('./lap.worker', import.meta.url));\n      this.worker.onmessage = ({data}) => {\n        this.cumulatedTimeByRaceNumber.set(data.cumulatedTimeByRaceNumber);\n        this.pacesByRaceNumber.set(data.pacesByRaceNumber);\n        this.lastLapNumberByRaceNumber.set(data.lastLapNumberByRaceNumber);\n        this.validTeamPaceLaps.set(data.validTeamPaceLaps);\n        this.teamBestLap.set(data.teamBestLap);\n        this.lastTeamLap.set(data.lastTeamLap);\n        this.lastTeamLapDeltaMilliseconds.set(data.lastTeamLapDeltaMilliseconds);\n        this.pitLaps.set(data.pitLaps);\n      };\n    }\n\n    combineLatest({\n      laps: toObservable(this.lapDataService.lapsMapById),\n      lapConfig: toObservable(this.lapConfigService.lapConfig),\n      activeTeam: toObservable(this.teamService.activeTeam)\n    })\n    .pipe(takeUntilDestroyed())\n    .subscribe(({laps, lapConfig, activeTeam}) => {\n      if (this.worker && lapConfig) {\n        this.worker.postMessage({\n          laps: laps,\n          lapConfig: lapConfig,\n          activeTeam: activeTeam,\n        });\n      }\n    });\n  }\n}\n\n"],"mappings":"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","names":["doc","doc","doc","data","doc"],"x_google_ignoreList":[9,10,11,12,13]}