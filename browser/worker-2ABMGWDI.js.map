{
  "version": 3,
  "sources": ["src/app/gap/service/gap.worker.ts"],
  "sourcesContent": ["/// <reference lib=\"webworker\" />\n\nimport { Team } from '../../team/model/team';\n\naddEventListener('message', ({ data }) => {\n  const lastLapNumberByRaceNumber = data.lastLapNumberByRaceNumber as Map<number, number>;\n  const cumulatedTimeByRaceNumber = data.cumulatedTimeByRaceNumber as Map<number, number[]>;\n  const racePositionByRaceNumber = data.racePositionByRaceNumber as Map<number, number>;\n  const activeTeam = data.activeTeam as Team | undefined;\n\n  const gapAheadMilliseconds = calculateGapAheadMilliseconds(\n    racePositionByRaceNumber,\n    activeTeam ? activeTeam.raceNumber : undefined,\n    cumulatedTimeByRaceNumber,\n    lastLapNumberByRaceNumber);\n\n  const gapBehindMilliseconds = calculateGapBehindMilliseconds(\n    racePositionByRaceNumber,\n    activeTeam ? activeTeam.raceNumber : undefined,\n    cumulatedTimeByRaceNumber,\n    lastLapNumberByRaceNumber\n  );\n\n  postMessage({\n    gapAheadMilliseconds: gapAheadMilliseconds,\n    gapBehindMilliseconds: gapBehindMilliseconds,\n  });\n});\n\nfunction calculateGapAheadMilliseconds(\n  racePositionByRaceNumber: Map<number, number>,\n  referenceRaceNumber: number | undefined,\n  cumulatedTimeByRaceNumber: Map<number, number[]>,\n  lastLapNumberByRaceNumber: Map<number, number>\n): number | undefined {\n\n  if (!referenceRaceNumber) {\n    return undefined;\n  }\n\n  const referenceRaceNumberPosition = racePositionByRaceNumber.get(referenceRaceNumber);\n  if (!referenceRaceNumberPosition || referenceRaceNumberPosition === 1) {\n    return undefined;\n  }\n\n  // Trova il team che \u00E8 in posizione precedente (teamRacePosition - 1)\n  let teamAheadRaceNumber: number | undefined;\n  for (const [raceNumber, position] of racePositionByRaceNumber) {\n    if (position === referenceRaceNumberPosition - 1) {\n      teamAheadRaceNumber = raceNumber;\n      break;\n    }\n  }\n\n  return getGapAheadFromTeams(\n    referenceRaceNumber,\n    teamAheadRaceNumber,\n    cumulatedTimeByRaceNumber,\n    lastLapNumberByRaceNumber,\n  );\n}\n\nfunction calculateGapBehindMilliseconds(\n  racePositionByRaceNumber: Map<number, number>,\n  referenceRaceNumber: number | undefined,\n  cumulatedTimeByRaceNumber: Map<number, number[]>,\n  lastLapNumberByRaceNumber: Map<number, number>\n): number | undefined {\n\n  if (!referenceRaceNumber) {\n    return\n  }\n\n  const referenceRaceNumberPosition = racePositionByRaceNumber.get(referenceRaceNumber);\n  if (!referenceRaceNumberPosition || referenceRaceNumberPosition === racePositionByRaceNumber.size) {\n    return undefined;\n  }\n\n  // Trova il team che \u00E8 in posizione successiva (teamRacePosition + 1)\n  let teamBehindRaceNumber: number | undefined;\n  for (const [raceNumber, position] of racePositionByRaceNumber) {\n    if (position === referenceRaceNumberPosition + 1) {\n      teamBehindRaceNumber = raceNumber;\n      break;\n    }\n  }\n\n  if (!teamBehindRaceNumber) {\n    return undefined;\n  }\n\n  return getGapBehindFromTeams(\n    referenceRaceNumber,\n    teamBehindRaceNumber,\n    cumulatedTimeByRaceNumber,\n    lastLapNumberByRaceNumber,\n  )\n}\n\n\nfunction getGapAheadFromTeams(\n  referenceTeamRaceNumber: number | undefined,\n  aheadTeamRaceNumber: number | undefined,\n  cumulatedTimeByRaceNumber: Map<number, number[]>,\n  lastLapNumberByRaceNumber: Map<number, number>\n): number | undefined {\n\n  if (!referenceTeamRaceNumber || !aheadTeamRaceNumber) {\n    return undefined;\n  }\n\n  // Ottieni il numero di giri completati dal team attivo\n  const activeTeamLastLapNumber = lastLapNumberByRaceNumber.get(referenceTeamRaceNumber);\n  const teamAheadLastLapNumber = lastLapNumberByRaceNumber.get(aheadTeamRaceNumber);\n\n  if (!activeTeamLastLapNumber || !teamAheadLastLapNumber) {\n    return undefined;\n  }\n\n  // Ottieni i tempi cumulativi\n  const activeTeamCumulatedTimes = cumulatedTimeByRaceNumber.get(referenceTeamRaceNumber);\n  const teamAheadCumulatedTimes = cumulatedTimeByRaceNumber.get(aheadTeamRaceNumber);\n\n  if (!activeTeamCumulatedTimes || !teamAheadCumulatedTimes) {\n    return undefined;\n  }\n\n  // Se i team hanno completato lo stesso numero di giri\n  if (activeTeamLastLapNumber === teamAheadLastLapNumber) {\n    const activeTeamTime = activeTeamCumulatedTimes[activeTeamCumulatedTimes.length - 1];\n    const teamAheadTime = teamAheadCumulatedTimes[teamAheadCumulatedTimes.length - 1];\n    return activeTeamTime - teamAheadTime;\n  }\n\n  // Se il team davanti ha completato pi\u00F9 giri, calcola il gap al giro del team attivo\n  if (teamAheadLastLapNumber > activeTeamLastLapNumber) {\n    const activeTeamTime = activeTeamCumulatedTimes[activeTeamCumulatedTimes.length - 1];\n    // Prendi il tempo del team davanti allo stesso giro del team attivo\n    const teamAheadTimeAtSameLap = teamAheadCumulatedTimes[activeTeamLastLapNumber - 1];\n    if (teamAheadTimeAtSameLap !== undefined) {\n      return activeTeamTime - teamAheadTimeAtSameLap;\n    }\n  }\n\n  return undefined;\n}\n\nfunction getGapBehindFromTeams(\n  referenceTeamRaceNumber: number | undefined,\n  behindTeamRaceNumber: number | undefined,\n  cumulatedTimeByRaceNumber: Map<number, number[]>,\n  lastLapNumberByRaceNumber: Map<number, number>\n): number | undefined {\n\n  if (!referenceTeamRaceNumber || !behindTeamRaceNumber) {\n    return undefined;\n  }\n\n  // Ottieni il numero di giri completati dai team\n  const activeTeamLastLapNumber = lastLapNumberByRaceNumber.get(referenceTeamRaceNumber);\n  const behindTeamLastLapNumber = lastLapNumberByRaceNumber.get(behindTeamRaceNumber);\n\n  if (!activeTeamLastLapNumber || !behindTeamLastLapNumber) {\n    return undefined;\n  }\n\n  // Ottieni i tempi cumulativi\n  const activeTeamCumulatedTimes = cumulatedTimeByRaceNumber.get(referenceTeamRaceNumber);\n  const behindTeamCumulatedTimes = cumulatedTimeByRaceNumber.get(behindTeamRaceNumber);\n\n  if (!activeTeamCumulatedTimes || !behindTeamCumulatedTimes) {\n    return undefined;\n  }\n\n  // Se i team hanno completato lo stesso numero di giri\n  if (activeTeamLastLapNumber === behindTeamLastLapNumber) {\n    const activeTeamTime = activeTeamCumulatedTimes[activeTeamCumulatedTimes.length - 1];\n    const teamBehindTime = behindTeamCumulatedTimes[behindTeamCumulatedTimes.length - 1];\n\n    return activeTeamTime - teamBehindTime;\n  }\n\n  // Se il team dietro ha completato meno giri, calcola il gap al giro del team dietro\n  if (activeTeamLastLapNumber > behindTeamLastLapNumber) {\n\n    const teamBehindTime = behindTeamCumulatedTimes[behindTeamCumulatedTimes.length - 1];\n\n    // Prendi il tempo del team attivo allo stesso giro del team dietro\n    const activeTeamTimeAtSameLap = activeTeamCumulatedTimes[behindTeamLastLapNumber - 1];\n    if (activeTeamTimeAtSameLap !== undefined) {\n      return activeTeamTimeAtSameLap - teamBehindTime;\n    }\n  }\n\n  return undefined;\n}\n"],
  "mappings": "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",
  "names": []
}
