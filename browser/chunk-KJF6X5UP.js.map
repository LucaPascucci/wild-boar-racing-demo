{
  "version": 3,
  "sources": ["src/app/gap/service/gap.service.ts", "src/app/steering-wheel/service/steering-wheel-message-update.service.ts", "src/app/steering-wheel/model/steering-wheel-message.ts"],
  "sourcesContent": ["import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { TeamService } from '../../team/service/team.service';\nimport { LapService } from '../../lap/service/lap.service';\nimport { RacePositionService } from '../../race/service/race-position.service';\nimport { combineLatest } from 'rxjs';\nimport { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GapService {\n\n  private readonly teamService = inject(TeamService);\n  private readonly lapService = inject(LapService);\n  private readonly racePositionService = inject(RacePositionService);\n\n  private readonly worker: Worker | undefined;\n\n  readonly gapAheadMilliseconds: WritableSignal<number | undefined> = signal(undefined);\n  readonly gapBehindMilliseconds: WritableSignal<number | undefined> = signal(undefined);\n\n  constructor() {\n    if (typeof Worker !== 'undefined') {\n      this.worker = new Worker(new URL('./gap.worker', import.meta.url));\n      this.worker.onmessage = ({data}) => {\n        this.gapAheadMilliseconds.set(data.gapAheadMilliseconds);\n        this.gapBehindMilliseconds.set(data.gapBehindMilliseconds);\n      };\n    }\n\n    combineLatest({\n      cumulatedTimeByRaceNumber: toObservable(this.lapService.cumulatedTimeByRaceNumber),\n      lastLapNumberByRaceNumber: toObservable(this.lapService.lastLapNumberByRaceNumber),\n      racePositionByRaceNumber: toObservable(this.racePositionService.racePositionByRaceNumber),\n      activeTeam: toObservable(this.teamService.activeTeam)\n    })\n    .pipe(takeUntilDestroyed())\n    .subscribe((\n      {\n        cumulatedTimeByRaceNumber,\n        lastLapNumberByRaceNumber,\n        racePositionByRaceNumber,\n        activeTeam\n      }) => {\n      if (this.worker) {\n        this.worker.postMessage({\n          cumulatedTimeByRaceNumber: cumulatedTimeByRaceNumber,\n          lastLapNumberByRaceNumber: lastLapNumberByRaceNumber,\n          racePositionByRaceNumber: racePositionByRaceNumber,\n          activeTeam: activeTeam,\n        });\n      }\n    });\n  }\n}\n", "import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { FirestoreService } from '../../shared/service/firestore.service';\nimport { collection, collectionData } from '@angular/fire/firestore';\nimport { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';\nimport { combineLatest, map, Observable, takeUntil } from 'rxjs';\nimport { SteeringWheelMessageUpdate } from '../model/steering-wheel-message-update';\nimport { RaceService } from '../../race/service/race.service';\nimport { Timestamp } from '@firebase/firestore';\nimport { SteeringWheelMessage } from '../model/steering-wheel-message';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SteeringWheelMessageUpdateService extends FirestoreService {\n\n  protected collectionPath: string = '/steering-wheel-message-updates';\n  protected collectionRef = collection(this.firestore, this.collectionPath);\n\n  private readonly raceService = inject(RaceService);\n\n  readonly steeringWheelMessageUpdate: WritableSignal<SteeringWheelMessageUpdate | undefined> = signal(undefined);\n\n  constructor() {\n    super();\n\n    combineLatest({\n      steeringWheelMessageUpdate: this.getSteeringWheelMessageUpdate()\n    }).pipe(takeUntilDestroyed())\n    .subscribe(({steeringWheelMessageUpdate}) => {\n      if (steeringWheelMessageUpdate) {\n        const actual = this.steeringWheelMessageUpdate();\n        if (!actual || actual.updatedAt < steeringWheelMessageUpdate.updatedAt) {\n          this.steeringWheelMessageUpdate.set(steeringWheelMessageUpdate);\n        }\n      }\n    });\n  }\n\n  updateMessageType(steeringWheelMessage: SteeringWheelMessage) {\n    let steeringWheelMessageUpdate = this.steeringWheelMessageUpdate();\n    const activeRace = this.raceService.activeRace();\n\n\n    if (activeRace === undefined) {\n      this.notificationService.info(\"No active race\")\n      return\n    }\n\n    if (!steeringWheelMessageUpdate) {\n      steeringWheelMessageUpdate = {\n        id: activeRace.id,\n        deleted: false,\n        raceId: activeRace.id,\n        type: steeringWheelMessage.type,\n        updatedAt: Timestamp.now()\n      }\n    }\n    if (steeringWheelMessageUpdate) {\n      steeringWheelMessageUpdate.type = steeringWheelMessage.type;\n      steeringWheelMessageUpdate.updatedAt = Timestamp.now();\n      steeringWheelMessageUpdate.deleted = false;\n      this.updateDataWithMessage(steeringWheelMessageUpdate.id, steeringWheelMessageUpdate, 'message type');\n    }\n  }\n\n  private getSteeringWheelMessageUpdate(): Observable<SteeringWheelMessageUpdate | undefined> {\n    return combineLatest({\n      steeringWheelMessageUpdates: collectionData(this.collectionRef),\n      activeRace: toObservable(this.raceService.activeRace)\n    })\n    .pipe(\n      takeUntil(this.destroyed),\n      map(({steeringWheelMessageUpdates, activeRace}) => {\n        const result = steeringWheelMessageUpdates as SteeringWheelMessageUpdate[];\n        if (activeRace && result.length > 0) {\n          return result\n          .filter(steeringWheelMessageUpdate => !steeringWheelMessageUpdate.deleted && steeringWheelMessageUpdate.raceId === activeRace.id)\n          .at(0);\n        }\n        return undefined;\n      })\n    );\n  }\n}\n", "export interface SteeringWheelMessage {\n  type: 'box' | 'safety-car' | 'fast-driver-behind';\n}\n\nexport function getContent(message: SteeringWheelMessage): string {\n  switch (message.type) {\n    case 'box':\n      return 'BOX';\n    case 'safety-car':\n      return 'SAFETY CAR';\n    case 'fast-driver-behind':\n      return 'FAST DRIVER BEHIND';\n  }\n}\n\nexport function getBackgroundColor(message: SteeringWheelMessage): string {\n  switch (message.type) {\n    case 'box':\n      return 'bg-orange-500';\n    case 'safety-car':\n      return 'bg-yellow-500';\n      case 'fast-driver-behind':\n        return 'bg-blue-500';\n  }\n}\n\nexport function getTextColor(message: SteeringWheelMessage): string {\n  return 'text-neutral-900';\n}\n\nexport function getInvertedBackgroundColor(message: SteeringWheelMessage): string {\n  return 'bg-neutral-900';\n}\n\nexport function getInvertedTextColor(message: SteeringWheelMessage): string {\n  switch (message.type) {\n    case 'box':\n      return 'text-orange-500';\n    case 'safety-car':\n      return 'text-yellow-500';\n    case 'fast-driver-behind':\n      return 'text-blue-500';\n  }\n}\n\nexport function getButtonBackgroundColor(message: SteeringWheelMessage): string {\n  switch (message.type) {\n    case 'box':\n      return 'bg-orange-500 hover:bg-orange-700 disabled:bg-orange-200';\n    case 'safety-car':\n      return 'bg-yellow-500 hover:bg-yellow-700 disabled:bg-yellow-200';\n    case 'fast-driver-behind':\n      return 'bg-blue-500 hover:bg-blue-700 disabled:bg-blue-200';\n  }\n}\n\n\n"],
  "mappings": "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",
  "names": []
}
