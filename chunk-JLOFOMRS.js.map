{"version":3,"sources":["node_modules/date-fns/addDays.js","node_modules/date-fns/addMonths.js","node_modules/date-fns/add.js","node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.js","node_modules/date-fns/_lib/normalizeDates.js","node_modules/date-fns/startOfDay.js","node_modules/date-fns/differenceInCalendarDays.js","node_modules/date-fns/compareAsc.js","node_modules/date-fns/differenceInCalendarMonths.js","node_modules/date-fns/differenceInCalendarYears.js","node_modules/date-fns/differenceInDays.js","node_modules/date-fns/_lib/getRoundingMethod.js","node_modules/date-fns/differenceInHours.js","node_modules/date-fns/differenceInMilliseconds.js","node_modules/date-fns/differenceInMinutes.js","node_modules/date-fns/endOfDay.js","node_modules/date-fns/endOfMonth.js","node_modules/date-fns/isLastDayOfMonth.js","node_modules/date-fns/differenceInMonths.js","node_modules/date-fns/differenceInSeconds.js","node_modules/date-fns/differenceInYears.js","node_modules/date-fns/_lib/normalizeInterval.js","node_modules/date-fns/intervalToDuration.js","src/app/util/date.util.ts","src/app/race/service/race-position.service.ts"],"sourcesContent":["import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addDays} function options.\n */\n\n/**\n * @name addDays\n * @category Day Helpers\n * @summary Add the specified number of days to the given date.\n *\n * @description\n * Add the specified number of days to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of days to be added.\n * @param options - An object with options\n *\n * @returns The new date with the days added\n *\n * @example\n * // Add 10 days to 1 September 2014:\n * const result = addDays(new Date(2014, 8, 1), 10)\n * //=> Thu Sep 11 2014 00:00:00\n */\nexport function addDays(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n\n  // If 0 days, no-op to avoid changing times in the hour before end of DST\n  if (!amount) return _date;\n  _date.setDate(_date.getDate() + amount);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default addDays;","import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMonths} function options.\n */\n\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of months to be added.\n * @param options - The options object\n *\n * @returns The new date with the months added\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * const result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n *\n * // Add one month to 30 January 2023:\n * const result = addMonths(new Date(2023, 0, 30), 1)\n * //=> Tue Feb 28 2023 00:00:00\n */\nexport function addMonths(date, amount, options) {\n  const _date = toDate(date, options?.in);\n  if (isNaN(amount)) return constructFrom(options?.in || date, NaN);\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return _date;\n  }\n  const dayOfMonth = _date.getDate();\n\n  // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n  const endOfDesiredMonth = constructFrom(options?.in || date, _date.getTime());\n  endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);\n  const daysInMonth = endOfDesiredMonth.getDate();\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    _date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return _date;\n  }\n}\n\n// Fallback for modularized imports:\nexport default addMonths;","import { addDays } from \"./addDays.js\";\nimport { addMonths } from \"./addMonths.js\";\nimport { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link add} function options.\n */\n\n/**\n * @name add\n * @category Common Helpers\n * @summary Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @description\n * Add the specified years, months, weeks, days, hours, minutes, and seconds to the given date.\n *\n * @typeParam DateType - The `Date` type the function operates on. Gets inferred from passed arguments. Allows using extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param duration - The object with years, months, weeks, days, hours, minutes, and seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add the following duration to 1 September 2014, 10:19:50\n * const result = add(new Date(2014, 8, 1, 10, 19, 50), {\n *   years: 2,\n *   months: 9,\n *   weeks: 1,\n *   days: 7,\n *   hours: 5,\n *   minutes: 9,\n *   seconds: 30,\n * })\n * //=> Thu Jun 15 2017 15:29:20\n */\nexport function add(date, duration, options) {\n  const {\n    years = 0,\n    months = 0,\n    weeks = 0,\n    days = 0,\n    hours = 0,\n    minutes = 0,\n    seconds = 0\n  } = duration;\n\n  // Add years and months\n  const _date = toDate(date, options?.in);\n  const dateWithMonths = months || years ? addMonths(_date, months + years * 12) : _date;\n\n  // Add weeks and days\n  const dateWithDays = days || weeks ? addDays(dateWithMonths, days + weeks * 7) : dateWithMonths;\n\n  // Add days, hours, minutes, and seconds\n  const minutesToAdd = minutes + hours * 60;\n  const secondsToAdd = seconds + minutesToAdd * 60;\n  const msToAdd = secondsToAdd * 1000;\n  return constructFrom(options?.in || date, +dateWithDays + msToAdd);\n}\n\n// Fallback for modularized imports:\nexport default add;","import { toDate } from \"../toDate.js\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(Date.UTC(_date.getFullYear(), _date.getMonth(), _date.getDate(), _date.getHours(), _date.getMinutes(), _date.getSeconds(), _date.getMilliseconds()));\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}","import { constructFrom } from \"../constructFrom.js\";\nexport function normalizeDates(context, ...dates) {\n  const normalize = constructFrom.bind(null, context || dates.find(date => typeof date === \"object\"));\n  return dates.map(normalize);\n}","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link startOfDay} function options.\n */\n\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - The options\n *\n * @returns The start of a day\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\nexport function startOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(0, 0, 0, 0);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default startOfDay;","import { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInDay } from \"./constants.js\";\nimport { startOfDay } from \"./startOfDay.js\";\n\n/**\n * The {@link differenceInCalendarDays} function options.\n */\n\n/**\n * @name differenceInCalendarDays\n * @category Day Helpers\n * @summary Get the number of calendar days between the given dates.\n *\n * @description\n * Get the number of calendar days between the given dates. This means that the times are removed\n * from the dates and then the difference in days is calculated.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - The options object\n *\n * @returns The number of calendar days\n *\n * @example\n * // How many calendar days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInCalendarDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 366\n * // How many calendar days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInCalendarDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 1\n */\nexport function differenceInCalendarDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(options?.in, laterDate, earlierDate);\n  const laterStartOfDay = startOfDay(laterDate_);\n  const earlierStartOfDay = startOfDay(earlierDate_);\n  const laterTimestamp = +laterStartOfDay - getTimezoneOffsetInMilliseconds(laterStartOfDay);\n  const earlierTimestamp = +earlierStartOfDay - getTimezoneOffsetInMilliseconds(earlierStartOfDay);\n\n  // Round the number of days to the nearest integer because the number of\n  // milliseconds in a day is not constant (e.g. it's different in the week of\n  // the daylight saving time clock shift).\n  return Math.round((laterTimestamp - earlierTimestamp) / millisecondsInDay);\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarDays;","import { toDate } from \"./toDate.js\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const diff = +toDate(dateLeft) - +toDate(dateRight);\n  if (diff < 0) return -1;else if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarMonths} function options.\n */\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(options?.in, laterDate, earlierDate);\n  const yearsDiff = laterDate_.getFullYear() - earlierDate_.getFullYear();\n  const monthsDiff = laterDate_.getMonth() - earlierDate_.getMonth();\n  return yearsDiff * 12 + monthsDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;","import { normalizeDates } from \"./_lib/normalizeDates.js\";\n\n/**\n * The {@link differenceInCalendarYears} function options.\n */\n\n/**\n * @name differenceInCalendarYears\n * @category Year Helpers\n * @summary Get the number of calendar years between the given dates.\n *\n * @description\n * Get the number of calendar years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n\n * @returns The number of calendar years\n *\n * @example\n * // How many calendar years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInCalendarYears(\n *   new Date(2015, 1, 11),\n *   new Date(2013, 11, 31)\n * );\n * //=> 2\n */\nexport function differenceInCalendarYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(options?.in, laterDate, earlierDate);\n  return laterDate_.getFullYear() - earlierDate_.getFullYear();\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarYears;","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { differenceInCalendarDays } from \"./differenceInCalendarDays.js\";\n\n/**\n * The {@link differenceInDays} function options.\n */\n\n/**\n * @name differenceInDays\n * @category Day Helpers\n * @summary Get the number of full days between the given dates.\n *\n * @description\n * Get the number of full day periods between two dates. Fractional days are\n * truncated towards zero.\n *\n * One \"full day\" is the distance between a local time in one day to the same\n * local time on the next or previous day. A full day can sometimes be less than\n * or more than 24 hours if a daylight savings change happens between two dates.\n *\n * To ignore DST and only measure exact 24-hour periods, use this instead:\n * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full days according to the local timezone\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?\n * const result = differenceInDays(\n *   new Date(2012, 6, 2, 0, 0),\n *   new Date(2011, 6, 2, 23, 0)\n * )\n * //=> 365\n *\n * @example\n * // How many full days are between\n * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?\n * const result = differenceInDays(\n *   new Date(2011, 6, 3, 0, 1),\n *   new Date(2011, 6, 2, 23, 59)\n * )\n * //=> 0\n *\n * @example\n * // How many full days are between\n * // 1 March 2020 0:00 and 1 June 2020 0:00 ?\n * // Note: because local time is used, the\n * // result will always be 92 days, even in\n * // time zones where DST starts and the\n * // period has only 92*24-1 hours.\n * const result = differenceInDays(\n *   new Date(2020, 5, 1),\n *   new Date(2020, 2, 1)\n * )\n * //=> 92\n */\nexport function differenceInDays(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(options?.in, laterDate, earlierDate);\n  const sign = compareLocalAsc(laterDate_, earlierDate_);\n  const difference = Math.abs(differenceInCalendarDays(laterDate_, earlierDate_));\n  laterDate_.setDate(laterDate_.getDate() - sign * difference);\n\n  // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full\n  // If so, result must be decreased by 1 in absolute value\n  const isLastDayNotFull = Number(compareLocalAsc(laterDate_, earlierDate_) === -sign);\n  const result = sign * (difference - isLastDayNotFull);\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Like `compareAsc` but uses local time not UTC, which is needed\n// for accurate equality comparisons of UTC timestamps that end up\n// having the same representation in local time, e.g. one hour before\n// DST ends vs. the instant that DST ends.\nfunction compareLocalAsc(laterDate, earlierDate) {\n  const diff = laterDate.getFullYear() - earlierDate.getFullYear() || laterDate.getMonth() - earlierDate.getMonth() || laterDate.getDate() - earlierDate.getDate() || laterDate.getHours() - earlierDate.getHours() || laterDate.getMinutes() - earlierDate.getMinutes() || laterDate.getSeconds() - earlierDate.getSeconds() || laterDate.getMilliseconds() - earlierDate.getMilliseconds();\n  if (diff < 0) return -1;\n  if (diff > 0) return 1;\n\n  // Return 0 if diff is 0; return NaN if diff is NaN\n  return diff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInDays;","export function getRoundingMethod(method) {\n  return number => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link differenceInHours} function options.\n */\n\n/**\n * @name differenceInHours\n * @category Hour Helpers\n * @summary Get the number of hours between the given dates.\n *\n * @description\n * Get the number of hours between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of hours\n *\n * @example\n * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?\n * const result = differenceInHours(\n *   new Date(2014, 6, 2, 19, 0),\n *   new Date(2014, 6, 2, 6, 50)\n * )\n * //=> 12\n */\nexport function differenceInHours(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(options?.in, laterDate, earlierDate);\n  const diff = (+laterDate_ - +earlierDate_) / millisecondsInHour;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInHours;","import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { millisecondsInMinute } from \"./constants.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInMinutes} function options.\n */\n\n/**\n * @name differenceInMinutes\n * @category Minute Helpers\n * @summary Get the number of minutes between the given dates.\n *\n * @description\n * Get the signed number of full (rounded towards 0) minutes between the given dates.\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of minutes\n *\n * @example\n * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?\n * const result = differenceInMinutes(\n *   new Date(2014, 6, 2, 12, 20, 0),\n *   new Date(2014, 6, 2, 12, 7, 59)\n * )\n * //=> 12\n *\n * @example\n * // How many minutes are between 10:01:59 and 10:00:00\n * const result = differenceInMinutes(\n *   new Date(2000, 0, 1, 10, 0, 0),\n *   new Date(2000, 0, 1, 10, 1, 59)\n * )\n * //=> -1\n */\nexport function differenceInMinutes(dateLeft, dateRight, options) {\n  const diff = differenceInMilliseconds(dateLeft, dateRight) / millisecondsInMinute;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMinutes;","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfDay} function options.\n */\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date, options) {\n  const _date = toDate(date, options?.in);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;","import { toDate } from \"./toDate.js\";\n\n/**\n * The {@link endOfMonth} function options.\n */\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The original date\n * @param options - An object with options\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;","import { endOfDay } from \"./endOfDay.js\";\nimport { endOfMonth } from \"./endOfMonth.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @param date - The date to check\n * @param options - An object with options\n *\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date, options) {\n  const _date = toDate(date, options?.in);\n  return +endOfDay(_date, options) === +endOfMonth(_date, options);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.js\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.js\";\n\n/**\n * The {@link differenceInMonths} function options.\n */\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(laterDate, earlierDate, options) {\n  const [laterDate_, workingLaterDate, earlierDate_] = normalizeDates(options?.in, laterDate, laterDate, earlierDate);\n  const sign = compareAsc(workingLaterDate, earlierDate_);\n  const difference = Math.abs(differenceInCalendarMonths(workingLaterDate, earlierDate_));\n  if (difference < 1) return 0;\n  if (workingLaterDate.getMonth() === 1 && workingLaterDate.getDate() > 27) workingLaterDate.setDate(30);\n  workingLaterDate.setMonth(workingLaterDate.getMonth() - sign * difference);\n  let isLastMonthNotFull = compareAsc(workingLaterDate, earlierDate_) === -sign;\n  if (isLastDayOfMonth(laterDate_) && difference === 1 && compareAsc(laterDate_, earlierDate_) === 1) {\n    isLastMonthNotFull = false;\n  }\n  const result = sign * (difference - +isLastMonthNotFull);\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;","import { getRoundingMethod } from \"./_lib/getRoundingMethod.js\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.js\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(laterDate, earlierDate, options) {\n  const diff = differenceInMilliseconds(laterDate, earlierDate) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;","import { normalizeDates } from \"./_lib/normalizeDates.js\";\nimport { compareAsc } from \"./compareAsc.js\";\nimport { differenceInCalendarYears } from \"./differenceInCalendarYears.js\";\n\n/**\n * The {@link differenceInYears} function options.\n */\n\n/**\n * @name differenceInYears\n * @category Year Helpers\n * @summary Get the number of full years between the given dates.\n *\n * @description\n * Get the number of full years between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n * @param options - An object with options\n *\n * @returns The number of full years\n *\n * @example\n * // How many full years are between 31 December 2013 and 11 February 2015?\n * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))\n * //=> 1\n */\nexport function differenceInYears(laterDate, earlierDate, options) {\n  const [laterDate_, earlierDate_] = normalizeDates(options?.in, laterDate, earlierDate);\n\n  // -1 if the left date is earlier than the right date\n  // 2023-12-31 - 2024-01-01 = -1\n  const sign = compareAsc(laterDate_, earlierDate_);\n\n  // First calculate the difference in calendar years\n  // 2024-01-01 - 2023-12-31 = 1 year\n  const diff = Math.abs(differenceInCalendarYears(laterDate_, earlierDate_));\n\n  // Now we need to calculate if the difference is full. To do that we set\n  // both dates to the same year and check if the both date's month and day\n  // form a full year.\n  laterDate_.setFullYear(1584);\n  earlierDate_.setFullYear(1584);\n\n  // For it to be true, when the later date is indeed later than the earlier date\n  // (2026-02-01 - 2023-12-10 = 3 years), the difference is full if\n  // the normalized later date is also later than the normalized earlier date.\n  // In our example, 1584-02-01 is earlier than 1584-12-10, so the difference\n  // is partial, hence we need to subtract 1 from the difference 3 - 1 = 2.\n  const partial = compareAsc(laterDate_, earlierDate_) === -sign;\n  const result = sign * (diff - +partial);\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInYears;","import { normalizeDates } from \"./normalizeDates.js\";\nexport function normalizeInterval(context, interval) {\n  const [start, end] = normalizeDates(context, interval.start, interval.end);\n  return {\n    start,\n    end\n  };\n}","import { normalizeInterval } from \"./_lib/normalizeInterval.js\";\nimport { add } from \"./add.js\";\nimport { differenceInDays } from \"./differenceInDays.js\";\nimport { differenceInHours } from \"./differenceInHours.js\";\nimport { differenceInMinutes } from \"./differenceInMinutes.js\";\nimport { differenceInMonths } from \"./differenceInMonths.js\";\nimport { differenceInSeconds } from \"./differenceInSeconds.js\";\nimport { differenceInYears } from \"./differenceInYears.js\";\n\n/**\n * The {@link intervalToDuration} function options.\n */\n\n/**\n * @name intervalToDuration\n * @category Common Helpers\n * @summary Convert interval to duration\n *\n * @description\n * Convert an interval object to a duration object.\n *\n * @param interval - The interval to convert to duration\n * @param options - The context options\n *\n * @returns The duration object\n *\n * @example\n * // Get the duration between January 15, 1929 and April 4, 1968.\n * intervalToDuration({\n *   start: new Date(1929, 0, 15, 12, 0, 0),\n *   end: new Date(1968, 3, 4, 19, 5, 0)\n * });\n * //=> { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }\n */\nexport function intervalToDuration(interval, options) {\n  const {\n    start,\n    end\n  } = normalizeInterval(options?.in, interval);\n  const duration = {};\n  const years = differenceInYears(end, start);\n  if (years) duration.years = years;\n  const remainingMonths = add(start, {\n    years: duration.years\n  });\n  const months = differenceInMonths(end, remainingMonths);\n  if (months) duration.months = months;\n  const remainingDays = add(remainingMonths, {\n    months: duration.months\n  });\n  const days = differenceInDays(end, remainingDays);\n  if (days) duration.days = days;\n  const remainingHours = add(remainingDays, {\n    days: duration.days\n  });\n  const hours = differenceInHours(end, remainingHours);\n  if (hours) duration.hours = hours;\n  const remainingMinutes = add(remainingHours, {\n    hours: duration.hours\n  });\n  const minutes = differenceInMinutes(end, remainingMinutes);\n  if (minutes) duration.minutes = minutes;\n  const remainingSeconds = add(remainingMinutes, {\n    minutes: duration.minutes\n  });\n  const seconds = differenceInSeconds(end, remainingSeconds);\n  if (seconds) duration.seconds = seconds;\n  return duration;\n}\n\n// Fallback for modularized imports:\nexport default intervalToDuration;","import { Duration, intervalToDuration } from \"date-fns\";\n\nexport function getElapsedTime(start: Date | undefined, end: Date | undefined): string {\n  if (!start || !end) {\n    return '--:--:--';\n  }\n  const duration = intervalToDuration({\n    end: end,\n    start: start\n  });\n  return formatDurationToHourMinuteSecond(duration);\n}\n\nexport function getTimeUntilFutureDate(futureDate: Date | undefined): string {\n  if (!futureDate) {\n    return '--:--:--';\n  }\n  const duration = intervalToDuration({\n    end: futureDate,\n    start: new Date()\n  });\n  return formatDurationToHourMinuteSecond(duration);\n}\n\nexport function millisecondsToTimeString(milliseconds: number | undefined): string {\n  if (!milliseconds || milliseconds < 0) {\n    return '--:--:--';\n  }\n  const totalSeconds = Math.floor(milliseconds / 1000);\n\n  const duration: Duration = {\n    hours: Math.floor(totalSeconds / 3600),\n    minutes: Math.floor((totalSeconds % 3600) / 60),\n    seconds: totalSeconds % 60\n  };\n\n  return formatDurationToHourMinuteSecond(duration);\n}\n\nexport function millisecondsToHourMinuteSecondString(milliseconds: number | undefined): string {\n  if (!milliseconds || milliseconds < 0) {\n    return '--:--:--';\n  }\n  const totalSeconds = Math.floor(milliseconds / 1000);\n\n  const duration: Duration = {\n    hours: Math.floor(totalSeconds / 3600),\n    minutes: Math.floor((totalSeconds % 3600) / 60),\n    seconds: totalSeconds % 60\n  };\n\n  return formatDurationToHourMinuteSecond(duration);\n}\n\nexport function millisecondsToHourMinuteSecondMillisecondString(milliseconds: number | undefined): string {\n  if (!milliseconds || milliseconds < 0) {\n    return '--:--:--.---';\n  }\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const remainingMilliseconds = milliseconds % 1000;\n\n  const duration: Duration = {\n    hours: Math.floor(totalSeconds / 3600),\n    minutes: Math.floor((totalSeconds % 3600) / 60),\n    seconds: totalSeconds % 60\n  };\n\n  return formatDurationToHourMinuteSecondMillisecond(duration, remainingMilliseconds);\n}\n\nexport function millisecondsToMinuteSecondMillisecondsString(milliseconds: number | undefined): string {\n  if (!milliseconds || milliseconds < 0) {\n    return '--:--.---';\n  }\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const remainingMilliseconds = milliseconds % 1000;\n\n  const duration: Duration = {\n    hours: Math.floor(totalSeconds / 3600),\n    minutes: Math.floor((totalSeconds % 3600) / 60),\n    seconds: totalSeconds % 60\n  };\n\n  return formatDurationToMinuteSecondMillisecond(duration, remainingMilliseconds);\n}\n\nexport function millisecondsToMinuteSecondString(milliseconds: number | undefined): string {\n  if (!milliseconds || milliseconds < 0) {\n    return '--:--';\n  }\n  const totalSeconds = Math.floor(milliseconds / 1000);\n\n  const duration: Duration = {\n    minutes: Math.floor((totalSeconds % 3600) / 60),\n    seconds: totalSeconds % 60\n  };\n\n  return formatDurationToMinuteSecond(duration);\n}\n\nexport function millisecondsToSecondMillisecondsString(milliseconds: number | undefined): string {\n  if (!milliseconds || milliseconds < 0) {\n    return '--.---';\n  }\n  const totalSeconds = Math.floor(milliseconds / 1000);\n  const remainingMilliseconds = milliseconds % 1000;\n\n  const duration: Duration = {\n    minutes: Math.floor((totalSeconds % 3600) / 60),\n    seconds: totalSeconds % 60\n  };\n\n  return formatDurationToSecondMillisecond(duration, remainingMilliseconds);\n}\n\n/// -- FORMAT DURATION ---\n\nfunction formatDurationToMinuteSecond(duration: Duration): string {\n  if (duration.minutes && duration.minutes < 0) {\n    return '--:--';\n  }\n  if (duration.seconds && duration.seconds < 0) {\n    return '--:--';\n  }\n  return [padTwo(duration.minutes), padTwo(duration.seconds)].join(\":\");\n}\n\nfunction formatDurationToHourMinuteSecond(duration: Duration): string {\n  if (duration.hours && duration.hours < 0) {\n    return '--:--:--';\n  }\n  if (duration.minutes && duration.minutes < 0) {\n    return '--:--:--';\n  }\n  if (duration.seconds && duration.seconds < 0) {\n    return '--:--:--';\n  }\n  return [padTwo(duration.hours), padTwo(duration.minutes), padTwo(duration.seconds)].join(\":\");\n}\n\nfunction formatDurationToHourMinuteSecondMillisecond(duration: Duration, milliseconds: number): string {\n  if (duration.hours && duration.hours < 0) {\n    return '--:--:--';\n  }\n  if (duration.minutes && duration.minutes < 0) {\n    return '--:--:--';\n  }\n  if (duration.seconds && duration.seconds < 0) {\n    return '--:--:--';\n  }\n  return [[padTwo(duration.hours), padTwo(duration.minutes), padTwo(duration.seconds)].join(\":\"), padThree(milliseconds)].join(\".\");\n}\n\nfunction formatDurationToMinuteSecondMillisecond(duration: Duration, milliseconds: number): string {\n  if (duration.minutes && duration.minutes < 0) {\n    return '--:--.---';\n  }\n  if (duration.seconds && duration.seconds < 0) {\n    return '--:--.---';\n  }\n  return [[padTwo(duration.minutes), padTwo(duration.seconds)].join(\":\"), padThree(milliseconds)].join(\".\");\n}\n\nfunction formatDurationToSecondMillisecond(duration: Duration, milliseconds: number): string {\n  if (duration.seconds && duration.seconds < 0) {\n    return '--.---';\n  }\n  return [padTwo(duration.seconds), padThree(milliseconds)].join(\".\");\n}\n\n/// PAD\n\nfunction padTwo(num: number | undefined): string {\n  if (num) {\n    return num < 10 ? `0${num}` : `${num}`;\n  }\n  return '00';\n}\n\nfunction padThree(num: number): string {\n  if (num < 10) {\n    return `00${num}`;\n  } else if (num < 100) {\n    return `0${num}`;\n  }\n  return `${num}`;\n}\n\n\n","import { inject, Injectable, signal, WritableSignal } from '@angular/core';\nimport { takeUntilDestroyed, toObservable } from '@angular/core/rxjs-interop';\nimport { combineLatest } from 'rxjs';\nimport { TeamService } from '../../team/service/team.service';\nimport { LapService } from '../../lap/service/lap.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RacePositionService {\n\n  private readonly teamService = inject(TeamService);\n  private readonly lapService = inject(LapService);\n\n  private readonly worker: Worker | undefined;\n\n  readonly racePositionByRaceNumber: WritableSignal<Map<number, number>> = signal(new Map<number, number>());\n  readonly teamRacePosition: WritableSignal<number | undefined> = signal(undefined);\n  readonly firstTeamRaceNumber: WritableSignal<number | undefined> = signal(undefined);\n\n  constructor() {\n\n    if (typeof Worker !== 'undefined') {\n      this.worker = new Worker(new URL('./race-position.worker', import.meta.url));\n      this.worker.onmessage = ({data}) => {\n        this.racePositionByRaceNumber.set(data.racePositionByRaceNumber);\n        this.teamRacePosition.set(data.teamRacePosition);\n        this.firstTeamRaceNumber.set(data.firstTeamRaceNumber);\n      };\n    }\n\n    combineLatest({\n      cumulatedTimeByRaceNumber: toObservable(this.lapService.cumulatedTimeByRaceNumber),\n      lastLapNumberByRaceNumber: toObservable(this.lapService.lastLapNumberByRaceNumber),\n      activeTeam: toObservable(this.teamService.activeTeam)\n    })\n    .pipe(takeUntilDestroyed())\n    .subscribe(({cumulatedTimeByRaceNumber, lastLapNumberByRaceNumber, activeTeam}) => {\n      if (this.worker) {\n        this.worker.postMessage({\n          cumulatedTimeByRaceNumber: cumulatedTimeByRaceNumber,\n          lastLapNumberByRaceNumber: lastLapNumberByRaceNumber,\n          activeTeam: activeTeam\n        });\n      }\n    });\n  }\n}\n"],"mappings":"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","names":[],"x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22]}