{
  "version": 3,
  "sources": ["src/app/race/service/race-position.worker.ts"],
  "sourcesContent": ["/// <reference lib=\"webworker\" />\n\nimport { Team } from '../../team/model/team';\n\naddEventListener('message', ({ data }) => {\n  const activeTeam = data.activeTeam as Team | undefined;\n  const lastLapNumberByRaceNumber = data.lastLapNumberByRaceNumber as Map<number, number>;\n  const cumulatedTimeByRaceNumber = data.cumulatedTimeByRaceNumber as Map<number, number[]>;\n\n  const racePositionByRaceNumber = calculateRacePositionByRaceNumber(lastLapNumberByRaceNumber, cumulatedTimeByRaceNumber);\n  const teamRacePosition = getTeamRacePosition(racePositionByRaceNumber, activeTeam);\n\n  let firstTeamRaceNumber = getFirstPositionRaceNumber(racePositionByRaceNumber);\n\n  postMessage({\n    racePositionByRaceNumber: racePositionByRaceNumber,\n    teamRacePosition: teamRacePosition,\n    firstTeamRaceNumber: firstTeamRaceNumber\n  });\n});\n\nfunction calculateRacePositionByRaceNumber(\n  lastLapNumberByRaceNumber: Map<number, number>,\n  cumulatedTimeByRaceNumber: Map<number, number[]>\n): Map<number, number> {\n\n  const result = new Map<number, number>();\n\n  // Crea un array di oggetti con raceNumber, lastLapNumber e totalTime per facilitare l'ordinamento\n  const raceData: Array<{\n    raceNumber: number;\n    lastLapNumber: number;\n    totalTime: number;\n  }> = [];\n\n  // Popola l'array con i dati di ogni team\n  lastLapNumberByRaceNumber.forEach((lastLapNumber, raceNumber) => {\n    const cumulatedTimes = cumulatedTimeByRaceNumber.get(raceNumber);\n    if (cumulatedTimes && cumulatedTimes.length > 0) {\n      // Il tempo totale \u00E8 l'ultimo elemento dell'array dei tempi cumulativi\n      const totalTime = cumulatedTimes[cumulatedTimes.length - 1];\n      raceData.push({\n        raceNumber,\n        lastLapNumber,\n        totalTime\n      });\n    }\n  });\n\n  // Ordina i team per posizione:\n  // 1. Prima per numero di giri completati (decrescente)\n  // 2. Poi per tempo totale (crescente) per team con stesso numero di giri\n  raceData.sort((a, b) => {\n    if (a.lastLapNumber !== b.lastLapNumber) {\n      return b.lastLapNumber - a.lastLapNumber; // Pi\u00F9 giri = posizione migliore\n    }\n    return a.totalTime - b.totalTime; // Tempo minore = posizione migliore\n  });\n\n  // Assegna le posizioni\n  raceData.forEach((data, index) => {\n    result.set(data.raceNumber, index + 1); // Posizione parte da 1\n  });\n\n  return result;\n}\n\nfunction getTeamRacePosition(racePositionByRaceNumber: Map<number, number>, activeTeam: Team | undefined): number | undefined {\n  if (!activeTeam) {\n    return undefined;\n  }\n  return racePositionByRaceNumber.get(activeTeam.raceNumber);\n}\n\nfunction getFirstPositionRaceNumber(racePositionByRaceNumber: Map<number, number>): number | undefined {\n  for (const [raceNumber, position] of racePositionByRaceNumber) {\n    if (position === 1) {\n      return raceNumber;\n    }\n  }\n  return undefined;\n}\n"],
  "mappings": ";AAIA,iBAAiB,WAAW,CAAC,EAAE,KAAK,MAAM;AACxC,QAAM,aAAa,KAAK;AACxB,QAAM,4BAA4B,KAAK;AACvC,QAAM,4BAA4B,KAAK;AAEvC,QAAM,2BAA2B,kCAAkC,2BAA2B,yBAAyB;AACvH,QAAM,mBAAmB,oBAAoB,0BAA0B,UAAU;AAEjF,MAAI,sBAAsB,2BAA2B,wBAAwB;AAE7E,cAAY;AAAA,IACV;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH,CAAC;AAED,SAAS,kCACP,2BACA,2BACqB;AAErB,QAAM,SAAS,oBAAI,IAAoB;AAGvC,QAAM,WAID,CAAC;AAGN,4BAA0B,QAAQ,CAAC,eAAe,eAAe;AAC/D,UAAM,iBAAiB,0BAA0B,IAAI,UAAU;AAC/D,QAAI,kBAAkB,eAAe,SAAS,GAAG;AAE/C,YAAM,YAAY,eAAe,eAAe,SAAS,CAAC;AAC1D,eAAS,KAAK;AAAA,QACZ;AAAA,QACA;AAAA,QACA;AAAA,MACF,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAKD,WAAS,KAAK,CAAC,GAAG,MAAM;AACtB,QAAI,EAAE,kBAAkB,EAAE,eAAe;AACvC,aAAO,EAAE,gBAAgB,EAAE;AAAA,IAC7B;AACA,WAAO,EAAE,YAAY,EAAE;AAAA,EACzB,CAAC;AAGD,WAAS,QAAQ,CAAC,MAAM,UAAU;AAChC,WAAO,IAAI,KAAK,YAAY,QAAQ,CAAC;AAAA,EACvC,CAAC;AAED,SAAO;AACT;AAEA,SAAS,oBAAoB,0BAA+C,YAAkD;AAC5H,MAAI,CAAC,YAAY;AACf,WAAO;AAAA,EACT;AACA,SAAO,yBAAyB,IAAI,WAAW,UAAU;AAC3D;AAEA,SAAS,2BAA2B,0BAAmE;AACrG,aAAW,CAAC,YAAY,QAAQ,KAAK,0BAA0B;AAC7D,QAAI,aAAa,GAAG;AAClB,aAAO;AAAA,IACT;AAAA,EACF;AACA,SAAO;AACT;",
  "names": []
}
