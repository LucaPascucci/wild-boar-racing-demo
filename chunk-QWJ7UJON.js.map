{
  "version": 3,
  "sources": ["src/app/steering-wheel/component/steering-wheel/steering-wheel.component.ts", "src/app/steering-wheel/component/steering-wheel/steering-wheel.component.html"],
  "sourcesContent": ["import { Component, computed, effect, inject, signal } from '@angular/core';\nimport { NgClass } from '@angular/common';\nimport { interval, Subscription } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { SteeringWheelConfigService } from '../../service/steering-wheel-config.service';\nimport {\n  SteeringWheelMessageUpdateService\n} from '../../service/steering-wheel-message-update.service';\nimport {\n  getBackgroundColor,\n  getContent,\n  getInvertedBackgroundColor,\n  getInvertedTextColor,\n  getTextColor,\n  SteeringWheelMessage\n} from '../../model/steering-wheel-message';\nimport { millisecondsToMinuteSecondMillisecondsString } from '../../../util/date.util';\nimport { RacePositionService } from '../../../race/service/race-position.service';\nimport { GapService } from '../../../gap/service/gap.service';\n\n\n@Component({\n  selector: 'app-steering-wheel',\n  imports: [NgClass],\n  templateUrl: './steering-wheel.component.html',\n  styleUrl: './steering-wheel.component.css'\n})\nexport class SteeringWheelComponent {\n\n  private readonly steeringWheelConfigService = inject(SteeringWheelConfigService);\n  private readonly steeringWheelMessageUpdateService = inject(SteeringWheelMessageUpdateService);\n  private readonly gapService = inject(GapService);\n  private readonly racePositionService = inject(RacePositionService);\n\n  readonly messageDurationSeconds = computed(() => {\n    const config =  this.steeringWheelConfigService.steeringWheelConfig();\n    return config?.messageDurationSeconds ?? 5;\n  });\n\n  readonly messageInvertColorIntervalMilliseconds = computed(() => {\n    const config =  this.steeringWheelConfigService.steeringWheelConfig();\n    return config?.messageInvertColorIntervalMilliseconds ?? 500;\n  });\n\n  // Reactive signals for message management\n  private readonly currentMessage = signal<SteeringWheelMessage | undefined>(undefined);\n  private readonly isInverted = signal<boolean>(false);\n  private readonly isDisplaying = signal<boolean>(false);\n  private intervalSubscription: Subscription | undefined;\n\n  // Computed properties for template\n  readonly messageContent = computed(() => {\n    const message = this.currentMessage();\n    return message ? getContent(message) : '';\n  });\n\n  readonly messageBackgroundColor = computed(() => {\n    const message = this.currentMessage();\n    if (!message) return '';\n    return this.isInverted() ? getInvertedBackgroundColor(message) : getBackgroundColor(message);\n  });\n\n  readonly messageTextColor = computed(() => {\n    const message = this.currentMessage();\n    if (!message) return '';\n    return this.isInverted() ? getInvertedTextColor(message) : getTextColor(message);\n  });\n\n  readonly shouldShowMessage = computed(() => {\n    return this.isDisplaying() && this.currentMessage() !== undefined;\n  });\n\n  readonly teamRacePosition = this.racePositionService.teamRacePosition;\n\n  readonly gapAheadMilliseconds = this.gapService.gapAheadMilliseconds;\n  readonly gapAheadMillisecondsString = computed(() => {\n    const value = this.gapService.gapAheadMilliseconds();\n    if (value) {\n      return millisecondsToMinuteSecondMillisecondsString(value);\n    }\n    return '--:--.---';\n  });\n\n  readonly gapBehindMilliseconds = this.gapService.gapBehindMilliseconds;\n  readonly gapBehindMillisecondsString = computed(() => {\n    const value = this.gapService.gapBehindMilliseconds();\n    if (value) {\n      return millisecondsToMinuteSecondMillisecondsString(Math.abs(value));\n    }\n    return '--:--.---';\n  });\n\n  constructor() {\n    // Effect to handle message updates from the service\n    effect(() => {\n      const messageUpdate = this.steeringWheelMessageUpdateService.steeringWheelMessageUpdate();\n\n      if (messageUpdate && messageUpdate.type) {\n        // Convert SteeringWheelMessageUpdate to SteeringWheelMessage\n        const steeringWheelMessage: SteeringWheelMessage = {\n          type: messageUpdate.type as 'box' | 'safety-car' | 'fast-driver-behind'\n        };\n\n        // Set the new message and start display cycle\n        this.currentMessage.set(steeringWheelMessage);\n        this.startMessageDisplay();\n      }\n    });\n  }\n\n  private startMessageDisplay() {\n    // Clear any existing subscription\n    if (this.intervalSubscription) {\n      this.intervalSubscription.unsubscribe();\n    }\n\n    // Reset state\n    this.isInverted.set(false);\n    this.isDisplaying.set(true);\n\n    const totalDurationMs = this.messageDurationSeconds() * 1000;\n    const intervalDuration = this.messageInvertColorIntervalMilliseconds();\n    const halfDurationMs = totalDurationMs / 2;\n    const totalIntervals = Math.ceil(halfDurationMs / intervalDuration);\n\n    // Start color inversion cycle for only half the total duration\n    this.intervalSubscription = interval(intervalDuration)\n      .pipe(take(totalIntervals))\n      .subscribe({\n        next: () => {\n          this.isInverted.update(inverted => !inverted);\n        },\n        complete: () => {\n          // After half duration, stop inverting colors but keep displaying\n          this.isInverted.set(false);\n\n          // Schedule the final stop after the remaining half duration\n          setTimeout(() => {\n            this.stopMessageDisplay();\n          }, halfDurationMs);\n        }\n      });\n  }\n\n  private stopMessageDisplay() {\n    if (this.intervalSubscription) {\n      this.intervalSubscription.unsubscribe();\n      this.intervalSubscription = undefined;\n    }\n\n    // Reset to original state\n    this.isInverted.set(false);\n    this.isDisplaying.set(false);\n  }\n}\n", "@if (shouldShowMessage()) {\n  <div class=\"w-full h-full min-h-screen min-w-screen flex flex-col items-center justify-center transition-colors duration-500\"\n       [ngClass]=\"shouldShowMessage() ? messageBackgroundColor() : 'bg-neutral-900'\">\n    <div class=\"text-6xl font-bold text-center transition-colors duration-500\"\n         [ngClass]=\"messageTextColor()\">\n      {{ messageContent() }}\n    </div>\n  </div>\n} @else {\n  <div class=\"w-full h-full min-h-screen min-w-screen flex flex-col gap-0.5 items-center justify-center bg-neutral-900 text-neutral-100\">\n    <div class=\"mb-3 text-center\">\n      <div class=\"text-4xl font-bold\">AHEAD</div>\n      <div class=\"text-4xl font-bold\">\n        @if (gapAheadMilliseconds()) {\n          +\n        }\n        {{ gapAheadMillisecondsString() }}\n      </div>\n    </div>\n\n    <div class=\"text-6xl font-bold mb-3\">P:\n      @if (teamRacePosition() !== undefined) {\n        {{ teamRacePosition() }}\n      } @else {\n        --\n      }\n    </div>\n    <div class=\"text-center\">\n      <div class=\"text-4xl font-bold\">BEHIND</div>\n      <div class=\"text-4xl font-bold\">\n        @if (gapBehindMilliseconds()) {\n          -\n        }\n        {{ gapBehindMillisecondsString() }}\n      </div>\n    </div>\n\n  </div>\n}\n"],
  "mappings": "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",
  "names": []
}
