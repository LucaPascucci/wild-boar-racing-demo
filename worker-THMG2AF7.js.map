{
  "version": 3,
  "sources": ["node_modules/date-fns/constants.js", "node_modules/date-fns/constructFrom.js", "node_modules/date-fns/toDate.js", "node_modules/date-fns/addMilliseconds.js", "node_modules/date-fns/addHours.js", "node_modules/date-fns/addSeconds.js", "node_modules/date-fns/differenceInMilliseconds.js", "node_modules/date-fns/secondsToMilliseconds.js", "src/app/stint/service/stint-optimizer.worker.ts"],
  "sourcesContent": ["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n", "import { constructFromSymbol } from \"./constants.js\";\n\n/**\n * @name constructFrom\n * @category Generic Helpers\n * @summary Constructs a date using the reference date and the value\n *\n * @description\n * The function constructs a new date using the constructor from the reference\n * date and the given value. It helps to build generic functions that accept\n * date extensions.\n *\n * It defaults to `Date` if the passed reference date is a number or a string.\n *\n * Starting from v3.7.0, it allows to construct a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The reference date to take constructor from\n * @param value - The value to create the date\n *\n * @returns Date initialized using the given date and value\n *\n * @example\n * import { constructFrom } from \"./constructFrom/date-fns\";\n *\n * // A function that clones a date preserving the original type\n * function cloneDate<DateType extends Date>(date: DateType): DateType {\n *   return constructFrom(\n *     date, // Use constructor from the given date\n *     date.getTime() // Use the date value to create a new date\n *   );\n * }\n */\nexport function constructFrom(date, value) {\n  if (typeof date === \"function\") return date(value);\n\n  if (date && typeof date === \"object\" && constructFromSymbol in date)\n    return date[constructFromSymbol](value);\n\n  if (date instanceof Date) return new date.constructor(value);\n\n  return new Date(value);\n}\n\n// Fallback for modularized imports:\nexport default constructFrom;\n", "import { constructFrom } from \"./constructFrom.js\";\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * Starting from v3.7.0, it clones a date using `[Symbol.for(\"constructDateFrom\")]`\n * enabling to transfer extra properties from the reference date to the new date.\n * It's useful for extensions like [`TZDate`](https://github.com/date-fns/tz)\n * that accept a time zone as a constructor argument.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument, context) {\n  // [TODO] Get rid of `toDate` or `constructFrom`?\n  return constructFrom(context || argument, argument);\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n", "import { constructFrom } from \"./constructFrom.js\";\nimport { toDate } from \"./toDate.js\";\n\n/**\n * The {@link addMilliseconds} function options.\n */\n\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of milliseconds to be added.\n * @param options - The options object\n *\n * @returns The new date with the milliseconds added\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\nexport function addMilliseconds(date, amount, options) {\n  return constructFrom(options?.in || date, +toDate(date) + amount);\n}\n\n// Fallback for modularized imports:\nexport default addMilliseconds;\n", "import { addMilliseconds } from \"./addMilliseconds.js\";\nimport { millisecondsInHour } from \"./constants.js\";\n\n/**\n * The {@link addHours} function options.\n */\n\n/**\n * @name addHours\n * @category Hour Helpers\n * @summary Add the specified number of hours to the given date.\n *\n * @description\n * Add the specified number of hours to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of hours to be added\n * @param options - An object with options\n *\n * @returns The new date with the hours added\n *\n * @example\n * // Add 2 hours to 10 July 2014 23:00:00:\n * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)\n * //=> Fri Jul 11 2014 01:00:00\n */\nexport function addHours(date, amount, options) {\n  return addMilliseconds(date, amount * millisecondsInHour, options);\n}\n\n// Fallback for modularized imports:\nexport default addHours;\n", "import { addMilliseconds } from \"./addMilliseconds.js\";\n\n/**\n * The {@link addSeconds} function options.\n */\n\n/**\n * @name addSeconds\n * @category Second Helpers\n * @summary Add the specified number of seconds to the given date.\n *\n * @description\n * Add the specified number of seconds to the given date.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n * @typeParam ResultDate - The result `Date` type, it is the type returned from the context function if it is passed, or inferred from the arguments.\n *\n * @param date - The date to be changed\n * @param amount - The amount of seconds to be added.\n * @param options - An object with options\n *\n * @returns The new date with the seconds added\n *\n * @example\n * // Add 30 seconds to 10 July 2014 12:45:00:\n * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)\n * //=> Thu Jul 10 2014 12:45:30\n */\nexport function addSeconds(date, amount, options) {\n  return addMilliseconds(date, amount * 1000, options);\n}\n\n// Fallback for modularized imports:\nexport default addSeconds;\n", "import { toDate } from \"./toDate.js\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @param laterDate - The later date\n * @param earlierDate - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(laterDate, earlierDate) {\n  return +toDate(laterDate) - +toDate(earlierDate);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n", "import { millisecondsInSecond } from \"./constants.js\";\n\n/**\n * @name secondsToMilliseconds\n * @category Conversion Helpers\n * @summary Convert seconds to milliseconds.\n *\n * @description\n * Convert a number of seconds to a full number of milliseconds.\n *\n * @param seconds - The number of seconds to be converted\n *\n * @returns The number of seconds converted in milliseconds\n *\n * @example\n * // Convert 2 seconds into milliseconds\n * const result = secondsToMilliseconds(2)\n * //=> 2000\n */\nexport function secondsToMilliseconds(seconds) {\n  return seconds * millisecondsInSecond;\n}\n\n// Fallback for modularized imports:\nexport default secondsToMilliseconds;\n", "/// <reference lib=\"webworker\" />\n\nimport { Race } from \"../../race/model/race\";\nimport { RaceConfig } from \"../../race/model/race-config\";\nimport { Pit } from \"../../pit/model/pit\";\nimport { OptimizedStint } from \"../model/optimized-stint\";\nimport { addHours, addSeconds, differenceInMilliseconds, secondsToMilliseconds } from \"date-fns\";\nimport { PitConfig } from \"../../pit/model/pit-config\";\nimport { LapConfig } from \"../../lap/model/lap-config\";\n\naddEventListener('message', ({ data }) => {\n  const activeRace = data.activeRace as Race | undefined;\n\n  const willEndRaceDate = data.willEndRaceDate !== undefined ? data.willEndRaceDate as Date : undefined;\n  const remainingDriverChanges: number = data.remainingDriverChanges;\n  const remainingTyreChange: number = data.remainingTyreChange;\n  const lastPit = data.lastPit as Pit | undefined;\n\n  const raceConfig = data.raceConfig as RaceConfig;\n  const lapConfig = data.lapConfig as LapConfig;\n  const pitConfig = data.pitConfig as PitConfig;\n\n  const referenceLapTimeMillisecond = lapConfig.referenceLapTimeMillisecond;\n  const raceDurationHour = raceConfig.durationHour\n\n  const optimizedStint = calculateOptimizedStint(\n      activeRace,\n      activeRace ? activeRace.startedAt : new Date(),\n      willEndRaceDate || addHours(new Date(), raceDurationHour),\n      remainingDriverChanges,\n      remainingTyreChange,\n      lastPit,\n      pitConfig,\n      referenceLapTimeMillisecond\n    );\n\n  postMessage({\n    optimizedStint: optimizedStint\n  });\n});\n\n\nfunction calculateOptimizedStint(\n    activeRace: Race | undefined,\n    startRaceDate: Date,\n    endRaceDate: Date,\n    remainingDriverChanges: number,\n    remainingTyreChange: number,\n    lastPit: Pit | undefined,\n    pitConfig: PitConfig,\n    referenceLapTimeMillisecond: number,\n): OptimizedStint | undefined {\n\n  const currentDate = new Date();\n\n  if (currentDate >= endRaceDate) {\n    return undefined;\n  }\n\n  const remainingPitTime = calculateRemainingPitTime(pitConfig, remainingDriverChanges, remainingTyreChange);\n\n  const timeRemaining = differenceInMilliseconds(endRaceDate, currentDate) - remainingPitTime;\n\n  let lastDriverChangeExitDate: Date | undefined = undefined;\n  if (lastPit) {\n    if (lastPit.exitAt) {\n      lastDriverChangeExitDate = lastPit.exitAt;\n    } else {\n      lastDriverChangeExitDate = addSeconds(lastPit.entryAt, pitConfig.minPitSeconds);\n    }\n  }\n\n  // Determine the time remaining at the last driver change\n  const lastDriverChange = lastDriverChangeExitDate || startRaceDate;\n  const timeRemainingFromLastDriverChange = differenceInMilliseconds(endRaceDate, lastDriverChange) - remainingPitTime;\n\n  // Case 1: Calculate avgStintTime considering the time at the last driver change\n  const avgStintTime = timeRemainingFromLastDriverChange / (remainingDriverChanges + 1);\n\n  // Case 2: Calculate avgIfChangedNow if a driver change happens now\n  let avgIfChangedNow = 0\n  let lapsIfDriverChangeNow = 0;\n  if (remainingDriverChanges > 0 && activeRace !== undefined) {\n    avgIfChangedNow = timeRemaining / remainingDriverChanges;\n    lapsIfDriverChangeNow = Math.floor(avgIfChangedNow / referenceLapTimeMillisecond)\n  }\n\n  return {\n    avgStintMillisecondsTime: avgStintTime,\n    laps: Math.floor(avgStintTime / referenceLapTimeMillisecond),\n    avgStintMillisecondsIfDriverChangedNow: avgIfChangedNow,\n    lapsIfDriverChangeNow: lapsIfDriverChangeNow\n  };\n}\n\nfunction calculateRemainingPitTime(\n    pitConfig: PitConfig,\n    remainingDriverChanges: number,\n    remainingTyreChange: number\n): number {\n  let normalDriverChanges = remainingDriverChanges - remainingTyreChange;\n\n  let remainingNormalPitTime = secondsToMilliseconds(pitConfig.minPitSeconds * normalDriverChanges);\n  let remainingTyreChangePitTime = secondsToMilliseconds(pitConfig.minPitWithTyreChangeSeconds * remainingTyreChange);\n  return remainingNormalPitTime + remainingTyreChangePitTime;\n}\n"],
  "mappings": "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",
  "names": []
}
