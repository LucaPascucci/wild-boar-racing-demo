{
  "version": 3,
  "sources": ["node_modules/date-fns/constants.js", "node_modules/date-fns/minutesToMilliseconds.js", "node_modules/date-fns/secondsToMilliseconds.js", "src/app/pit-simulator/service/pit-simulator.worker.ts"],
  "sourcesContent": ["/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occurs every 4 years, except for years that are divisible by 100 and not divisible by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n\n/**\n * @constant\n * @name constructFromSymbol\n * @summary Symbol enabling Date extensions to inherit properties from the reference date.\n *\n * The symbol is used to enable the `constructFrom` function to construct a date\n * using a reference date and a value. It allows to transfer extra properties\n * from the reference date to the new date. It's useful for extensions like\n * [`TZDate`](https://github.com/date-fns/tz) that accept a time zone as\n * a constructor argument.\n */\nexport const constructFromSymbol = Symbol.for(\"constructDateFrom\");\n", "import { millisecondsInMinute } from \"./constants.js\";\n\n/**\n * @name minutesToMilliseconds\n * @category Conversion Helpers\n * @summary Convert minutes to milliseconds.\n *\n * @description\n * Convert a number of minutes to a full number of milliseconds.\n *\n * @param minutes - The number of minutes to be converted\n *\n * @returns The number of minutes converted in milliseconds\n *\n * @example\n * // Convert 2 minutes to milliseconds\n * const result = minutesToMilliseconds(2)\n * //=> 120000\n */\nexport function minutesToMilliseconds(minutes) {\n  return Math.trunc(minutes * millisecondsInMinute);\n}\n\n// Fallback for modularized imports:\nexport default minutesToMilliseconds;\n", "import { millisecondsInSecond } from \"./constants.js\";\n\n/**\n * @name secondsToMilliseconds\n * @category Conversion Helpers\n * @summary Convert seconds to milliseconds.\n *\n * @description\n * Convert a number of seconds to a full number of milliseconds.\n *\n * @param seconds - The number of seconds to be converted\n *\n * @returns The number of seconds converted in milliseconds\n *\n * @example\n * // Convert 2 seconds into milliseconds\n * const result = secondsToMilliseconds(2)\n * //=> 2000\n */\nexport function secondsToMilliseconds(seconds) {\n  return seconds * millisecondsInSecond;\n}\n\n// Fallback for modularized imports:\nexport default secondsToMilliseconds;\n", "/// <reference lib=\"webworker\" />\n\nimport { Lap } from '../../lap/model/lap';\nimport { minutesToMilliseconds, secondsToMilliseconds } from 'date-fns';\nimport { PitConfig } from '../../pit/model/pit-config';\nimport { DriverConfig } from '../../driver/model/driver-config';\nimport { LapSimulatorConfig } from '../../lap-simulator/model/lap-simulator-config';\n\naddEventListener('message', ({ data }) => {\n  const pitLaps = data.pitLaps as Lap[];\n  const pacesByRaceNumber = data.pacesByRaceNumber as Map<number, number>;\n  const pitConfig = data.pitConfig as PitConfig;\n  const driverConfig = data.driverConfig as DriverConfig\n  const lapSimulatorConfig = data.lapSimulatorConfig as LapSimulatorConfig;\n\n  const timeLostThroughPitMilliseconds = lapSimulatorConfig.timeLostThroughPitMilliseconds;\n  const pitOutLineBeforeStart = pitConfig.pitOutLineBeforeStart;\n  const minTotalPitMinute = pitConfig.minTotalPitMinute;\n  const minPitSeconds = pitConfig.minPitSeconds;\n  const maxPitSeconds = pitConfig.maxPitSeconds;\n  const minDriverChange = driverConfig.minDriverChange;\n\n  const pitTimeMillisecondsByRaceNumber = calculatePitTimeMillisecondsByRaceNumber(\n    pitLaps,\n    pacesByRaceNumber,\n    timeLostThroughPitMilliseconds,\n    pitOutLineBeforeStart\n  );\n\n  const pitDoneByRaceNumber = calculatePitDoneByRaceNumber(pitLaps, pitOutLineBeforeStart);\n\n  const result = calculateRemainingPitDataByRaceNumber(\n    pitTimeMillisecondsByRaceNumber,\n    pitDoneByRaceNumber,\n    minTotalPitMinute,\n    minDriverChange,\n    minPitSeconds,\n    maxPitSeconds,\n    timeLostThroughPitMilliseconds\n  );\n\n  postMessage({\n    pitDoneByRaceNumber: pitDoneByRaceNumber,\n    remainingPitByRaceNumber: result.remainingPitByRaceNumber,\n    remainingPitTimeMillisecondsByRaceNumber: result.remainingPitTimeMillisecondsByRaceNumber,\n  });\n});\n\nfunction calculatePitTimeMillisecondsByRaceNumber(\n  pitLaps: Lap[],\n  pacesByRaceNumber: Map<number, number>,\n  timeLostThroughPitMilliseconds: number,\n  pitOutLineBeforeStart: boolean\n): Map<number,number> {\n  const result = new Map<number,number>();\n\n  const timeLostThroughPitMillisecondsByPitOutLineBeforeStart = pitOutLineBeforeStart ? timeLostThroughPitMilliseconds : Math.round(timeLostThroughPitMilliseconds / 2);\n\n  pitLaps.forEach(lap => {\n    const paceRaceNumber = pacesByRaceNumber.get(lap.raceNumber);\n    const pitTime = lap.lapMilliseconds - (paceRaceNumber || 0) - timeLostThroughPitMillisecondsByPitOutLineBeforeStart;\n\n    if (!result.has(lap.raceNumber)) {\n\n      result.set(lap.raceNumber, pitTime);\n    }\n    result.set(lap.raceNumber, result.get(lap.raceNumber)! + pitTime);\n  });\n\n  return result;\n}\n\nfunction calculatePitDoneByRaceNumber(\n  pitLaps: Lap[],\n  pitOutLineBeforeStart: boolean\n): Map<number,number> {\n  const result = new Map<number,number>();\n\n  pitLaps.forEach(lap => {\n    if (!result.has(lap.raceNumber)) {\n      result.set(lap.raceNumber, 0);\n    }\n    result.set(lap.raceNumber, result.get(lap.raceNumber)! + 1);\n  });\n\n  result.forEach((value, key) => {\n    if (pitOutLineBeforeStart) {\n      result.set(key, value);\n    } else {\n      result.set(key, Math.round(value / 2));\n    }\n  })\n  return result;\n\n}\n\n// NOTE: manca logica sulla presenza di pit da fare con cambio gomme\nfunction calculateRemainingPitDataByRaceNumber(\n  pitTimeMillisecondsByRaceNumber: Map<number,number>,\n  pitDoneByRaceNumber: Map<number,number>,\n  minTotalPitMinute: number,\n  minDriverChange: number,\n  minPitSeconds: number,\n  maxPitSeconds: number,\n  timeLostThroughPitMilliseconds: number,\n): {\n  remainingPitTimeMillisecondsByRaceNumber: Map<number,number>,\n  remainingPitByRaceNumber: Map<number,number>\n} {\n  const remainingPitTimeMillisecondsByRaceNumber = new Map<number,number>();\n  const remainingPitByRaceNumber = new Map<number,number>();\n\n  pitTimeMillisecondsByRaceNumber.forEach((pitTime, raceNumber) => {\n    let remainingPitTimeMilliseconds = 0;\n    if (minTotalPitMinute > 0) {\n      // Regolamento impone minimo tempo ai pit\n      remainingPitTimeMilliseconds = minutesToMilliseconds(minTotalPitMinute) - pitTime;\n      if (remainingPitTimeMilliseconds <= 0) {\n        remainingPitByRaceNumber.set(raceNumber, 0);\n        remainingPitTimeMillisecondsByRaceNumber.set(raceNumber, 0);\n      } else {\n        let remainingPitNumber = 0;\n        if (timeLostThroughPitMilliseconds === 0) {\n          remainingPitTimeMillisecondsByRaceNumber.set(raceNumber, remainingPitTimeMilliseconds);\n        } else if (timeLostThroughPitMilliseconds < 0) {\n          remainingPitNumber = Math.round(remainingPitTimeMilliseconds / secondsToMilliseconds(minPitSeconds));\n        } else if (timeLostThroughPitMilliseconds > 0) {\n          remainingPitNumber = Math.round(remainingPitTimeMilliseconds / secondsToMilliseconds(maxPitSeconds));\n        }\n        remainingPitByRaceNumber.set(raceNumber, remainingPitNumber);\n        remainingPitTimeMilliseconds += remainingPitNumber * timeLostThroughPitMilliseconds;\n        remainingPitTimeMillisecondsByRaceNumber.set(raceNumber, remainingPitTimeMilliseconds);\n      }\n    } else {\n      // Regolamento impone minimo cambio pilota\n      let remainingPit = 0;\n      if (pitDoneByRaceNumber.get(raceNumber)) {\n        remainingPit = minDriverChange - pitDoneByRaceNumber.get(raceNumber)!;\n      }\n      if (remainingPit <= 0) {\n        remainingPitByRaceNumber.set(raceNumber, 0);\n        remainingPitTimeMillisecondsByRaceNumber.set(raceNumber, 0);\n      } else {\n        remainingPitByRaceNumber.set(raceNumber, remainingPit);\n        remainingPitTimeMilliseconds = remainingPit * (secondsToMilliseconds(minPitSeconds) + timeLostThroughPitMilliseconds);\n        remainingPitTimeMillisecondsByRaceNumber.set(raceNumber, remainingPitTimeMilliseconds);\n      }\n    }\n  });\n\n  return {\n    remainingPitTimeMillisecondsByRaceNumber,\n    remainingPitByRaceNumber\n  };\n}\n"],
  "mappings": "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",
  "names": []
}
