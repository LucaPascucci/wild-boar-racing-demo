{
  "version": 3,
  "sources": ["src/app/stint/service/stint.worker.ts"],
  "sourcesContent": ["/// <reference lib=\"webworker\" />\n\nimport { Stint } from \"../model/stint\";\nimport { OptimizedStint } from \"../model/optimized-stint\";\nimport { LapConfig } from \"../../lap/model/lap-config\";\nimport { Lap } from '../../lap/model/lap';\n\naddEventListener('message', ({ data }) => {\n  const stints = data.stints as Stint[]\n  const optimizedStint = data.optimizedStint as OptimizedStint | undefined;\n  const lapConfig = data.lapConfig as LapConfig;\n  const validTeamPaceLaps = data.validTeamPaceLaps;\n\n  const referenceLapTimeMillisecond = lapConfig.referenceLapTimeMillisecond;\n\n  let activeStint = getActiveStint(stints);\n  let activeStintTimeOnTrack = calculateActiveStintTimeOnTrack(activeStint);\n  let activeStintLaps = calculateActiveStintLaps(activeStintTimeOnTrack, referenceLapTimeMillisecond);\n  let activeStintRemainingTimeOnTrack = calculateActiveStintRemainingTimeOnTrack(activeStintTimeOnTrack, optimizedStint);\n  let activeStintRemainingLaps = calculateActiveStintRemainingLaps(activeStintLaps, optimizedStint);\n  let activeStintGainedTimeOnTrack = calculateActiveStintGainedTimeOnTrack(activeStintTimeOnTrack, optimizedStint);\n  let activeStintGainedLaps = calculateActiveStintGainedLaps(activeStintLaps, optimizedStint);\n  let stintAVGMilliseconds = calculateStintAVGMilliseconds(stints);\n  let stintPaceById = calculatePaceByStintId(validTeamPaceLaps);\n  let stintBestLapById = getStintsBestLap(validTeamPaceLaps)\n\n  postMessage({\n    activeStint: activeStint,\n    activeStintTimeOnTrack: activeStintTimeOnTrack,\n    activeStintLaps: activeStintLaps,\n    activeStintRemainingTimeOnTrack: activeStintRemainingTimeOnTrack,\n    activeStintRemainingLaps: activeStintRemainingLaps,\n    activeStintGainedTimeOnTrack: activeStintGainedTimeOnTrack,\n    activeStintGainedLaps: activeStintGainedLaps,\n    stintAVGMilliseconds: stintAVGMilliseconds,\n    stintPaceById: stintPaceById,\n    stintBestLapById: stintBestLapById\n  });\n});\n\n\nfunction getActiveStint(stints: Stint[]): Stint | undefined {\n  for (const stint of stints) {\n    if (!stint.endedAt) {\n      return stint;\n    }\n  }\n  return undefined;\n}\n\nfunction calculateActiveStintTimeOnTrack(activeStint: Stint | undefined): number {\n  if (activeStint) {\n    return new Date().getTime() - activeStint.startedAt.getTime();\n  }\n  return 0;\n}\n\nfunction calculateActiveStintLaps(timeOnTrack: number, referenceLapTimeMillisecond: number): number {\n  if (timeOnTrack >= 0) {\n    return Math.floor(timeOnTrack / referenceLapTimeMillisecond);\n  }\n  return 0;\n}\n\nfunction calculateActiveStintRemainingTimeOnTrack(timeOnTrack: number, optimizedStint: OptimizedStint | undefined): number {\n  if (timeOnTrack >= 0 && optimizedStint) {\n    return optimizedStint.avgStintMillisecondsTime - timeOnTrack;\n  }\n  return 0;\n}\n\nfunction calculateActiveStintRemainingLaps(laps: number, optimizedStint: OptimizedStint | undefined): number {\n  let result = 0;\n  if (laps >= 0 && optimizedStint) {\n    result = optimizedStint.laps - laps;\n  }\n  return result > 0 ? result : 0;\n}\n\nfunction calculateActiveStintGainedTimeOnTrack(timeOnTrack: number, optimizedStint: OptimizedStint | undefined): number {\n  let result = 0;\n  if (timeOnTrack >= 0 && optimizedStint) {\n    result = optimizedStint.avgStintMillisecondsTime - timeOnTrack;\n  }\n  return result < 0 ? Math.abs(result) : 0;\n}\n\nfunction calculateActiveStintGainedLaps(laps: number, optimizedStint: OptimizedStint | undefined): number {\n  let result = 0;\n  if (laps >= 0 && optimizedStint) {\n    result = optimizedStint.laps - laps;\n  }\n  return result < 0 ? Math.abs(result) : 0;\n}\n\nfunction calculateStintAVGMilliseconds(stint: Stint[]): number {\n  const completedStints = stint.filter(stint => stint.endedAt);\n\n  if (completedStints.length === 0) {\n    return 0;\n  }\n\n  const totalMilliseconds = completedStints.reduce((sum, stint) => {\n    return sum + (stint.endedAt!.getTime() - stint.startedAt.getTime());\n  }, 0);\n\n  return Math.round(totalMilliseconds / completedStints.length);\n}\n\nfunction calculatePaceByStintId(validTeamPaceLaps: Lap[]): Map<number, number> {\n    const stintPaceMap = new Map<number, number>();\n\n    // Group laps by stintId and calculate sum and count in a single pass\n    const stintData = new Map<number, { totalMilliseconds: number, lapCount: number }>();\n\n    for (const lap of validTeamPaceLaps) {\n      const existing = stintData.get(lap.stintId);\n      if (existing) {\n        existing.totalMilliseconds += lap.lapMilliseconds;\n        existing.lapCount++;\n      } else {\n        stintData.set(lap.stintId, {\n          totalMilliseconds: lap.lapMilliseconds,\n          lapCount: 1\n        });\n      }\n    }\n\n    // Calculate average pace for each stint\n    for (const [stintId, data] of stintData) {\n        // Additional validation to prevent NaN results\n        if (data.lapCount > 0 && data.totalMilliseconds > 0) {\n            const averagePace = Math.round(data.totalMilliseconds / data.lapCount);\n            // Only add valid average pace values\n            if (!isNaN(averagePace) && averagePace > 0) {\n                stintPaceMap.set(stintId, averagePace);\n            }\n        }\n    }\n    return stintPaceMap;\n}\n\nfunction getStintsBestLap(validTeamPaceLaps: Lap[]): Map<number, number> {\n  const stintBestLapMap = new Map<number, number>();\n\n  for (const lap of validTeamPaceLaps) {\n    const existingBestLapMilliseconds = stintBestLapMap.get(lap.stintId);\n\n    if (!existingBestLapMilliseconds || lap.lapMilliseconds < existingBestLapMilliseconds) {\n      stintBestLapMap.set(lap.stintId, lap.lapMilliseconds);\n    }\n  }\n\n  return stintBestLapMap;\n}\n"],
  "mappings": "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",
  "names": ["stint"]
}
